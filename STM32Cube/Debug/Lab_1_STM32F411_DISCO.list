
Lab_1_STM32F411_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003634  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080037cc  080037cc  000047cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f0  080037f0  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080037f0  080037f0  000047f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037f8  080037f8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f8  080037f8  000047f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037fc  080037fc  000047fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003800  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000068  08003868  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08003868  00005318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b042  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4d  00000000  00000000  000100da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00012028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e4  00000000  00000000  00012bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017232  00000000  00000000  000134a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f168  00000000  00000000  0002a6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7cc  00000000  00000000  0003983e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c500a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035fc  00000000  00000000  000c5050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c864c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080037b4 	.word	0x080037b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	080037b4 	.word	0x080037b4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004d0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d013      	beq.n	8000508 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d00b      	beq.n	8000508 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004f0:	e000      	b.n	80004f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f9      	beq.n	80004f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004fe:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	b2d2      	uxtb	r2, r2
 8000506:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000508:	687b      	ldr	r3, [r7, #4]
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char* ptr, int len) {
 8000516:	b580      	push	{r7, lr}
 8000518:	b086      	sub	sp, #24
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	e009      	b.n	800053c <_write+0x26>
		ITM_SendChar(*ptr++);
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	60ba      	str	r2, [r7, #8]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ffc9 	bl	80004c8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf1      	blt.n	8000528 <_write+0x12>
	}
	return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <test_assembly>:

int test_assembly(int a, int b) {
 800054e:	b480      	push	{r7}
 8000550:	b085      	sub	sp, #20
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
	int res = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
	__asm volatile ("ADD %[result], %[input_i], %[input_b]"
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	4413      	add	r3, r2
 8000562:	60fb      	str	r3, [r7, #12]
		: [result] "=r" (res)
		: [input_i] "r" (a), [input_b] "r" (b)
	);
	return res;
 8000564:	68fb      	ldr	r3, [r7, #12]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fcf8 	bl	8000f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f836 	bl	80005ec <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000580:	f000 f89c 	bl	80006bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f97c 	bl	8000880 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000588:	f000 f8b8 	bl	80006fc <MX_I2C1_Init>
  MX_I2S2_Init();
 800058c:	f000 f8e4 	bl	8000758 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000590:	f000 f910 	bl	80007b4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000594:	f000 f93e 	bl	8000814 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  loop = test_assembly(98, 1);
 8000598:	2101      	movs	r1, #1
 800059a:	2062      	movs	r0, #98	@ 0x62
 800059c:	f7ff ffd7 	bl	800054e <test_assembly>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <main+0x6c>)
 80005a6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello erff\n");
 80005a8:	480e      	ldr	r0, [pc, #56]	@ (80005e4 <main+0x70>)
 80005aa:	f002 fd6f 	bl	800308c <puts>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b2:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <main+0x74>)
 80005b4:	f000 fff3 	bl	800159e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80005b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005bc:	f000 fd48 	bl	8001050 <HAL_Delay>

	  if(loop<100){
 80005c0:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <main+0x6c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b63      	cmp	r3, #99	@ 0x63
 80005c6:	d806      	bhi.n	80005d6 <main+0x62>
		  loop++;
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <main+0x6c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b03      	ldr	r3, [pc, #12]	@ (80005e0 <main+0x6c>)
 80005d2:	701a      	strb	r2, [r3, #0]
 80005d4:	e7e8      	b.n	80005a8 <main+0x34>
	  }else{
		  loop = 0;
 80005d6:	4b02      	ldr	r3, [pc, #8]	@ (80005e0 <main+0x6c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
	  printf("Hello erff\n");
 80005dc:	e7e4      	b.n	80005a8 <main+0x34>
 80005de:	bf00      	nop
 80005e0:	200001c0 	.word	0x200001c0
 80005e4:	080037cc 	.word	0x080037cc
 80005e8:	40020c00 	.word	0x40020c00

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fe26 	bl	800324c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a26      	ldr	r2, [pc, #152]	@ (80006b4 <SystemClock_Config+0xc8>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b24      	ldr	r3, [pc, #144]	@ (80006b4 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000660:	23c0      	movs	r3, #192	@ 0xc0
 8000662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000664:	2304      	movs	r3, #4
 8000666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fd93 	bl	800219c <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 f9f8 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2103      	movs	r1, #3
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fff5 	bl	800268c <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006a8:	f000 f9e2 	bl	8000a70 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	@ 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006d2:	2301      	movs	r3, #1
 80006d4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006d6:	23c8      	movs	r3, #200	@ 0xc8
 80006d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006da:	2305      	movs	r3, #5
 80006dc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e2:	463b      	mov	r3, r7
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f9dd 	bl	8002aa4 <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80006f0:	f000 f9be 	bl	8000a70 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_I2C1_Init+0x50>)
 800073a:	f000 ff4b 	bl	80015d4 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f994 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000084 	.word	0x20000084
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_I2S2_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	@ (80007ac <MX_I2S2_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_I2S2_Init+0x50>)
 8000764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000768:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_I2S2_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000770:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <MX_I2S2_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_I2S2_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <MX_I2S2_Init+0x50>)
 800077e:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <MX_I2S2_Init+0x58>)
 8000780:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_I2S2_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <MX_I2S2_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_I2S2_Init+0x50>)
 8000790:	2201      	movs	r2, #1
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_I2S2_Init+0x50>)
 8000796:	f001 f861 	bl	800185c <HAL_I2S_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f966 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000d8 	.word	0x200000d8
 80007ac:	40003800 	.word	0x40003800
 80007b0:	00017700 	.word	0x00017700

080007b4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <MX_I2S3_Init+0x54>)
 80007ba:	4a14      	ldr	r2, [pc, #80]	@ (800080c <MX_I2S3_Init+0x58>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007be:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_I2S3_Init+0x54>)
 80007c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_I2S3_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <MX_I2S3_Init+0x54>)
 80007d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_I2S3_Init+0x54>)
 80007dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000810 <MX_I2S3_Init+0x5c>)
 80007de:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_I2S3_Init+0x54>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_I2S3_Init+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_I2S3_Init+0x54>)
 80007f4:	f001 f832 	bl	800185c <HAL_I2S_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007fe:	f000 f937 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000120 	.word	0x20000120
 800080c:	40003c00 	.word	0x40003c00
 8000810:	00017700 	.word	0x00017700

08000814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_SPI1_Init+0x64>)
 800081a:	4a18      	ldr	r2, [pc, #96]	@ (800087c <MX_SPI1_Init+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000844:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000860:	220a      	movs	r2, #10
 8000862:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000866:	f002 fa6f 	bl	8002d48 <HAL_SPI_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000870:	f000 f8fe 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000168 	.word	0x20000168
 800087c:	40013000 	.word	0x40013000

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	@ 0x30
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	4b70      	ldr	r3, [pc, #448]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a6f      	ldr	r2, [pc, #444]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008a0:	f043 0310 	orr.w	r3, r3, #16
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b6d      	ldr	r3, [pc, #436]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	4b69      	ldr	r3, [pc, #420]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a68      	ldr	r2, [pc, #416]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b66      	ldr	r3, [pc, #408]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b62      	ldr	r3, [pc, #392]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a61      	ldr	r2, [pc, #388]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b5f      	ldr	r3, [pc, #380]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b5b      	ldr	r3, [pc, #364]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a5a      	ldr	r2, [pc, #360]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b58      	ldr	r3, [pc, #352]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b54      	ldr	r3, [pc, #336]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a53      	ldr	r2, [pc, #332]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b51      	ldr	r3, [pc, #324]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b4d      	ldr	r3, [pc, #308]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a4c      	ldr	r2, [pc, #304]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b4a      	ldr	r3, [pc, #296]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2108      	movs	r1, #8
 8000942:	4847      	ldr	r0, [pc, #284]	@ (8000a60 <MX_GPIO_Init+0x1e0>)
 8000944:	f000 fe12 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	4845      	ldr	r0, [pc, #276]	@ (8000a64 <MX_GPIO_Init+0x1e4>)
 800094e:	f000 fe0d 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000952:	2200      	movs	r2, #0
 8000954:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000958:	4843      	ldr	r0, [pc, #268]	@ (8000a68 <MX_GPIO_Init+0x1e8>)
 800095a:	f000 fe07 	bl	800156c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800095e:	2304      	movs	r3, #4
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	483b      	ldr	r0, [pc, #236]	@ (8000a60 <MX_GPIO_Init+0x1e0>)
 8000972:	f000 fc77 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000976:	2308      	movs	r3, #8
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4834      	ldr	r0, [pc, #208]	@ (8000a60 <MX_GPIO_Init+0x1e0>)
 800098e:	f000 fc69 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000992:	2332      	movs	r3, #50	@ 0x32
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000996:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	482e      	ldr	r0, [pc, #184]	@ (8000a60 <MX_GPIO_Init+0x1e0>)
 80009a8:	f000 fc5c 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4828      	ldr	r0, [pc, #160]	@ (8000a64 <MX_GPIO_Init+0x1e4>)
 80009c4:	f000 fc4e 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009cc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4823      	ldr	r0, [pc, #140]	@ (8000a6c <MX_GPIO_Init+0x1ec>)
 80009de:	f000 fc41 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009e2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	481b      	ldr	r0, [pc, #108]	@ (8000a68 <MX_GPIO_Init+0x1e8>)
 80009fc:	f000 fc32 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4815      	ldr	r0, [pc, #84]	@ (8000a6c <MX_GPIO_Init+0x1ec>)
 8000a16:	f000 fc25 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a1a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <MX_GPIO_Init+0x1ec>)
 8000a38:	f000 fc14 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <MX_GPIO_Init+0x1e8>)
 8000a50:	f000 fc08 	bl	8001264 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	@ 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	40020000 	.word	0x40020000

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aba:	2007      	movs	r0, #7
 8000abc:	f000 fb9e 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a19      	ldr	r2, [pc, #100]	@ (8000b50 <HAL_I2C_MspInit+0x84>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12c      	bne.n	8000b48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <HAL_I2C_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <HAL_I2C_MspInit+0x88>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_I2C_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b0a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b10:	2312      	movs	r3, #18
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <HAL_I2C_MspInit+0x8c>)
 8000b28:	f000 fb9c 	bl	8001264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <HAL_I2C_MspInit+0x88>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <HAL_I2C_MspInit+0x88>)
 8000b36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <HAL_I2C_MspInit+0x88>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	@ 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40005400 	.word	0x40005400
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020400 	.word	0x40020400

08000b5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	@ 0x38
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a59      	ldr	r2, [pc, #356]	@ (8000ce0 <HAL_I2S_MspInit+0x184>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d15b      	bne.n	8000c36 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
 8000b82:	4b58      	ldr	r3, [pc, #352]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a57      	ldr	r2, [pc, #348]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b55      	ldr	r3, [pc, #340]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	623b      	str	r3, [r7, #32]
 8000b98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	4b51      	ldr	r3, [pc, #324]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a50      	ldr	r2, [pc, #320]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b4e      	ldr	r3, [pc, #312]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	61fb      	str	r3, [r7, #28]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
 8000bba:	4b4a      	ldr	r3, [pc, #296]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a49      	ldr	r2, [pc, #292]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b47      	ldr	r3, [pc, #284]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000be2:	2306      	movs	r3, #6
 8000be4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	483e      	ldr	r0, [pc, #248]	@ (8000ce8 <HAL_I2S_MspInit+0x18c>)
 8000bee:	f000 fb39 	bl	8001264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c02:	2305      	movs	r3, #5
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4836      	ldr	r0, [pc, #216]	@ (8000ce8 <HAL_I2S_MspInit+0x18c>)
 8000c0e:	f000 fb29 	bl	8001264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c24:	2305      	movs	r3, #5
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	482f      	ldr	r0, [pc, #188]	@ (8000cec <HAL_I2S_MspInit+0x190>)
 8000c30:	f000 fb18 	bl	8001264 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c34:	e04f      	b.n	8000cd6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf0 <HAL_I2S_MspInit+0x194>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d14a      	bne.n	8000cd6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	4a26      	ldr	r2, [pc, #152]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c64:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c80:	4a18      	ldr	r2, [pc, #96]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <HAL_I2S_MspInit+0x188>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c94:	2310      	movs	r3, #16
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4811      	ldr	r0, [pc, #68]	@ (8000cf4 <HAL_I2S_MspInit+0x198>)
 8000cb0:	f000 fad8 	bl	8001264 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cb4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <HAL_I2S_MspInit+0x18c>)
 8000cd2:	f000 fac7 	bl	8001264 <HAL_GPIO_Init>
}
 8000cd6:	bf00      	nop
 8000cd8:	3738      	adds	r7, #56	@ 0x38
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40003800 	.word	0x40003800
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40003c00 	.word	0x40003c00
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	@ (8000d7c <HAL_SPI_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12b      	bne.n	8000d72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a10      	ldr	r2, [pc, #64]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_SPI_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d52:	23e0      	movs	r3, #224	@ 0xe0
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d62:	2305      	movs	r3, #5
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <HAL_SPI_MspInit+0x8c>)
 8000d6e:	f000 fa79 	bl	8001264 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	@ 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40013000 	.word	0x40013000
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <NMI_Handler+0x4>

08000d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <MemManage_Handler+0x4>

08000da0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <UsageFault_Handler+0x4>

08000db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dde:	f000 f917 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e00a      	b.n	8000e0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df8:	f3af 8000 	nop.w
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	60ba      	str	r2, [r7, #8]
 8000e04:	b2ca      	uxtb	r2, r1
 8000e06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dbf0      	blt.n	8000df8 <_read+0x12>
  }

  return len;
 8000e16:	687b      	ldr	r3, [r7, #4]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e48:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_isatty>:

int _isatty(int file)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b085      	sub	sp, #20
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e90:	4a14      	ldr	r2, [pc, #80]	@ (8000ee4 <_sbrk+0x5c>)
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <_sbrk+0x60>)
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <_sbrk+0x64>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	@ (8000ef0 <_sbrk+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d207      	bcs.n	8000ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb8:	f002 fa16 	bl	80032e8 <__errno>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	e009      	b.n	8000edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <_sbrk+0x64>)
 8000ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20020000 	.word	0x20020000
 8000ee8:	00000400 	.word	0x00000400
 8000eec:	200001c4 	.word	0x200001c4
 8000ef0:	20000318 	.word	0x20000318

08000ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1c:	f7ff ffea 	bl	8000ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f20:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f22:	490d      	ldr	r1, [pc, #52]	@ (8000f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f24:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f38:	4c0a      	ldr	r4, [pc, #40]	@ (8000f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f46:	f002 f9d5 	bl	80032f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff fb13 	bl	8000574 <main>
  bx  lr    
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f5c:	08003800 	.word	0x08003800
  ldr r2, =_sbss
 8000f60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f64:	20000318 	.word	0x20000318

08000f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC_IRQHandler>
	...

08000f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f70:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <HAL_Init+0x40>)
 8000f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_Init+0x40>)
 8000f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <HAL_Init+0x40>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f931 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f808 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fd6c 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f93b 	bl	800124a <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 f911 	bl	8001212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	@ (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	20000008 	.word	0x20000008
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	@ (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	200001c8 	.word	0x200001c8

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200001c8 	.word	0x200001c8

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d005      	beq.n	8001076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_Delay+0x44>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001076:	bf00      	nop
 8001078:	f7ff ffde 	bl	8001038 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f7      	bhi.n	8001078 <HAL_Delay+0x28>
  {
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008

08001098 <__NVIC_SetPriorityGrouping>:
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_GetPriorityGrouping>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <__NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_SetPriority>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	@ (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	@ (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	@ 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <SysTick_Config>:
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c8:	d301      	bcc.n	80011ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ce:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <SysTick_Config+0x40>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d6:	210f      	movs	r1, #15
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f7ff ff8e 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <SysTick_Config+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e6:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <SysTick_Config+0x40>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	e000e010 	.word	0xe000e010

080011fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff47 	bl	8001098 <__NVIC_SetPriorityGrouping>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001224:	f7ff ff5c 	bl	80010e0 <__NVIC_GetPriorityGrouping>
 8001228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff8e 	bl	8001150 <NVIC_EncodePriority>
 8001234:	4602      	mov	r2, r0
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff5d 	bl	80010fc <__NVIC_SetPriority>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffb0 	bl	80011b8 <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e159      	b.n	8001534 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 8148 	bne.w	800152e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d005      	beq.n	80012b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d130      	bne.n	8001318 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 0201 	and.w	r2, r3, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b03      	cmp	r3, #3
 8001322:	d017      	beq.n	8001354 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	69b9      	ldr	r1, [r7, #24]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80a2 	beq.w	800152e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b57      	ldr	r3, [pc, #348]	@ (800154c <HAL_GPIO_Init+0x2e8>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	4a56      	ldr	r2, [pc, #344]	@ (800154c <HAL_GPIO_Init+0x2e8>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fa:	4b54      	ldr	r3, [pc, #336]	@ (800154c <HAL_GPIO_Init+0x2e8>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001406:	4a52      	ldr	r2, [pc, #328]	@ (8001550 <HAL_GPIO_Init+0x2ec>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a49      	ldr	r2, [pc, #292]	@ (8001554 <HAL_GPIO_Init+0x2f0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d019      	beq.n	8001466 <HAL_GPIO_Init+0x202>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a48      	ldr	r2, [pc, #288]	@ (8001558 <HAL_GPIO_Init+0x2f4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0x1fe>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a47      	ldr	r2, [pc, #284]	@ (800155c <HAL_GPIO_Init+0x2f8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00d      	beq.n	800145e <HAL_GPIO_Init+0x1fa>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a46      	ldr	r2, [pc, #280]	@ (8001560 <HAL_GPIO_Init+0x2fc>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x1f6>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a45      	ldr	r2, [pc, #276]	@ (8001564 <HAL_GPIO_Init+0x300>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_GPIO_Init+0x1f2>
 8001452:	2304      	movs	r3, #4
 8001454:	e008      	b.n	8001468 <HAL_GPIO_Init+0x204>
 8001456:	2307      	movs	r3, #7
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x204>
 800145a:	2303      	movs	r3, #3
 800145c:	e004      	b.n	8001468 <HAL_GPIO_Init+0x204>
 800145e:	2302      	movs	r3, #2
 8001460:	e002      	b.n	8001468 <HAL_GPIO_Init+0x204>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x204>
 8001466:	2300      	movs	r3, #0
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	f002 0203 	and.w	r2, r2, #3
 800146e:	0092      	lsls	r2, r2, #2
 8001470:	4093      	lsls	r3, r2
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001478:	4935      	ldr	r1, [pc, #212]	@ (8001550 <HAL_GPIO_Init+0x2ec>)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001486:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <HAL_GPIO_Init+0x304>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001568 <HAL_GPIO_Init+0x304>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <HAL_GPIO_Init+0x304>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d4:	4a24      	ldr	r2, [pc, #144]	@ (8001568 <HAL_GPIO_Init+0x304>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <HAL_GPIO_Init+0x304>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001568 <HAL_GPIO_Init+0x304>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001504:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_GPIO_Init+0x304>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001528:	4a0f      	ldr	r2, [pc, #60]	@ (8001568 <HAL_GPIO_Init+0x304>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3301      	adds	r3, #1
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	f67f aea2 	bls.w	8001280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3724      	adds	r7, #36	@ 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40013800 	.word	0x40013800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	40020800 	.word	0x40020800
 8001560:	40020c00 	.word	0x40020c00
 8001564:	40021000 	.word	0x40021000
 8001568:	40013c00 	.word	0x40013c00

0800156c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001588:	e003      	b.n	8001592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015b0:	887a      	ldrh	r2, [r7, #2]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	041a      	lsls	r2, r3, #16
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	400b      	ands	r3, r1
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e12b      	b.n	800183e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d106      	bne.n	8001600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fa66 	bl	8000acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2224      	movs	r2, #36	@ 0x24
 8001604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001636:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001638:	f001 fa20 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 800163c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4a81      	ldr	r2, [pc, #516]	@ (8001848 <HAL_I2C_Init+0x274>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d807      	bhi.n	8001658 <HAL_I2C_Init+0x84>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4a80      	ldr	r2, [pc, #512]	@ (800184c <HAL_I2C_Init+0x278>)
 800164c:	4293      	cmp	r3, r2
 800164e:	bf94      	ite	ls
 8001650:	2301      	movls	r3, #1
 8001652:	2300      	movhi	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	e006      	b.n	8001666 <HAL_I2C_Init+0x92>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4a7d      	ldr	r2, [pc, #500]	@ (8001850 <HAL_I2C_Init+0x27c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	bf94      	ite	ls
 8001660:	2301      	movls	r3, #1
 8001662:	2300      	movhi	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0e7      	b.n	800183e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4a78      	ldr	r2, [pc, #480]	@ (8001854 <HAL_I2C_Init+0x280>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	0c9b      	lsrs	r3, r3, #18
 8001678:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	430a      	orrs	r2, r1
 800168c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a6a      	ldr	r2, [pc, #424]	@ (8001848 <HAL_I2C_Init+0x274>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d802      	bhi.n	80016a8 <HAL_I2C_Init+0xd4>
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	3301      	adds	r3, #1
 80016a6:	e009      	b.n	80016bc <HAL_I2C_Init+0xe8>
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	4a69      	ldr	r2, [pc, #420]	@ (8001858 <HAL_I2C_Init+0x284>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	099b      	lsrs	r3, r3, #6
 80016ba:	3301      	adds	r3, #1
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	430b      	orrs	r3, r1
 80016c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	495c      	ldr	r1, [pc, #368]	@ (8001848 <HAL_I2C_Init+0x274>)
 80016d8:	428b      	cmp	r3, r1
 80016da:	d819      	bhi.n	8001710 <HAL_I2C_Init+0x13c>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1e59      	subs	r1, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ea:	1c59      	adds	r1, r3, #1
 80016ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016f0:	400b      	ands	r3, r1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <HAL_I2C_Init+0x138>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1e59      	subs	r1, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fbb1 f3f3 	udiv	r3, r1, r3
 8001704:	3301      	adds	r3, #1
 8001706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170a:	e051      	b.n	80017b0 <HAL_I2C_Init+0x1dc>
 800170c:	2304      	movs	r3, #4
 800170e:	e04f      	b.n	80017b0 <HAL_I2C_Init+0x1dc>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d111      	bne.n	800173c <HAL_I2C_Init+0x168>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1e58      	subs	r0, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6859      	ldr	r1, [r3, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	440b      	add	r3, r1
 8001726:	fbb0 f3f3 	udiv	r3, r0, r3
 800172a:	3301      	adds	r3, #1
 800172c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf0c      	ite	eq
 8001734:	2301      	moveq	r3, #1
 8001736:	2300      	movne	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	e012      	b.n	8001762 <HAL_I2C_Init+0x18e>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1e58      	subs	r0, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	0099      	lsls	r1, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001752:	3301      	adds	r3, #1
 8001754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf0c      	ite	eq
 800175c:	2301      	moveq	r3, #1
 800175e:	2300      	movne	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_Init+0x196>
 8001766:	2301      	movs	r3, #1
 8001768:	e022      	b.n	80017b0 <HAL_I2C_Init+0x1dc>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10e      	bne.n	8001790 <HAL_I2C_Init+0x1bc>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1e58      	subs	r0, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6859      	ldr	r1, [r3, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	440b      	add	r3, r1
 8001780:	fbb0 f3f3 	udiv	r3, r0, r3
 8001784:	3301      	adds	r3, #1
 8001786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800178e:	e00f      	b.n	80017b0 <HAL_I2C_Init+0x1dc>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e58      	subs	r0, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	0099      	lsls	r1, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	6809      	ldr	r1, [r1, #0]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69da      	ldr	r2, [r3, #28]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6911      	ldr	r1, [r2, #16]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68d2      	ldr	r2, [r2, #12]
 80017ea:	4311      	orrs	r1, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	430b      	orrs	r3, r1
 80017f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2220      	movs	r2, #32
 800182a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	000186a0 	.word	0x000186a0
 800184c:	001e847f 	.word	0x001e847f
 8001850:	003d08ff 	.word	0x003d08ff
 8001854:	431bde83 	.word	0x431bde83
 8001858:	10624dd3 	.word	0x10624dd3

0800185c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e128      	b.n	8001ac0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a90      	ldr	r2, [pc, #576]	@ (8001ac8 <HAL_I2S_Init+0x26c>)
 8001886:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff f967 	bl	8000b5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2202      	movs	r2, #2
 8001892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80018a4:	f023 030f 	bic.w	r3, r3, #15
 80018a8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2202      	movs	r2, #2
 80018b0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d060      	beq.n	800197c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018c2:	2310      	movs	r3, #16
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e001      	b.n	80018cc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018c8:	2320      	movs	r3, #32
 80018ca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d802      	bhi.n	80018da <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018da:	2001      	movs	r0, #1
 80018dc:	f001 f9d2 	bl	8002c84 <HAL_RCCEx_GetPeriphCLKFreq>
 80018e0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ea:	d125      	bne.n	8001938 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d010      	beq.n	8001916 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001910:	3305      	adds	r3, #5
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	e01f      	b.n	8001956 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	461a      	mov	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	3305      	adds	r3, #5
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	e00e      	b.n	8001956 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	461a      	mov	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	3305      	adds	r3, #5
 8001954:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4a5c      	ldr	r2, [pc, #368]	@ (8001acc <HAL_I2S_Init+0x270>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	08db      	lsrs	r3, r3, #3
 8001960:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	085b      	lsrs	r3, r3, #1
 8001972:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	e003      	b.n	8001984 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800197c:	2302      	movs	r3, #2
 800197e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d902      	bls.n	8001990 <HAL_I2S_Init+0x134>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	2bff      	cmp	r3, #255	@ 0xff
 800198e:	d907      	bls.n	80019a0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001994:	f043 0210 	orr.w	r2, r3, #16
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e08f      	b.n	8001ac0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	ea42 0103 	orr.w	r1, r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80019be:	f023 030f 	bic.w	r3, r3, #15
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6851      	ldr	r1, [r2, #4]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6892      	ldr	r2, [r2, #8]
 80019ca:	4311      	orrs	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	68d2      	ldr	r2, [r2, #12]
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6992      	ldr	r2, [r2, #24]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019e2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d161      	bne.n	8001ab0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a38      	ldr	r2, [pc, #224]	@ (8001ad0 <HAL_I2S_Init+0x274>)
 80019f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a37      	ldr	r2, [pc, #220]	@ (8001ad4 <HAL_I2S_Init+0x278>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_I2S_Init+0x1a4>
 80019fc:	4b36      	ldr	r3, [pc, #216]	@ (8001ad8 <HAL_I2S_Init+0x27c>)
 80019fe:	e001      	b.n	8001a04 <HAL_I2S_Init+0x1a8>
 8001a00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	4932      	ldr	r1, [pc, #200]	@ (8001ad4 <HAL_I2S_Init+0x278>)
 8001a0c:	428a      	cmp	r2, r1
 8001a0e:	d101      	bne.n	8001a14 <HAL_I2S_Init+0x1b8>
 8001a10:	4a31      	ldr	r2, [pc, #196]	@ (8001ad8 <HAL_I2S_Init+0x27c>)
 8001a12:	e001      	b.n	8001a18 <HAL_I2S_Init+0x1bc>
 8001a14:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001a18:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001a1c:	f023 030f 	bic.w	r3, r3, #15
 8001a20:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad4 <HAL_I2S_Init+0x278>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_I2S_Init+0x1d4>
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad8 <HAL_I2S_Init+0x27c>)
 8001a2e:	e001      	b.n	8001a34 <HAL_I2S_Init+0x1d8>
 8001a30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a34:	2202      	movs	r2, #2
 8001a36:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a25      	ldr	r2, [pc, #148]	@ (8001ad4 <HAL_I2S_Init+0x278>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_I2S_Init+0x1ea>
 8001a42:	4b25      	ldr	r3, [pc, #148]	@ (8001ad8 <HAL_I2S_Init+0x27c>)
 8001a44:	e001      	b.n	8001a4a <HAL_I2S_Init+0x1ee>
 8001a46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a56:	d003      	beq.n	8001a60 <HAL_I2S_Init+0x204>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d103      	bne.n	8001a68 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	e001      	b.n	8001a6c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a76:	4313      	orrs	r3, r2
 8001a78:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	897b      	ldrh	r3, [r7, #10]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a98:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <HAL_I2S_Init+0x278>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d101      	bne.n	8001aa8 <HAL_I2S_Init+0x24c>
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <HAL_I2S_Init+0x27c>)
 8001aa6:	e001      	b.n	8001aac <HAL_I2S_Init+0x250>
 8001aa8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001aac:	897a      	ldrh	r2, [r7, #10]
 8001aae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	08001bd3 	.word	0x08001bd3
 8001acc:	cccccccd 	.word	0xcccccccd
 8001ad0:	08001ce9 	.word	0x08001ce9
 8001ad4:	40003800 	.word	0x40003800
 8001ad8:	40003400 	.word	0x40003400

08001adc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	881a      	ldrh	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	1c9a      	adds	r2, r3, #2
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10e      	bne.n	8001b6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001b5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffb8 	bl	8001adc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b86:	b292      	uxth	r2, r2
 8001b88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8e:	1c9a      	adds	r2, r3, #2
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10e      	bne.n	8001bca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001bba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff93 	bl	8001af0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d13a      	bne.n	8001c64 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d109      	bne.n	8001c0c <I2S_IRQHandler+0x3a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c02:	2b40      	cmp	r3, #64	@ 0x40
 8001c04:	d102      	bne.n	8001c0c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffb4 	bl	8001b74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c12:	2b40      	cmp	r3, #64	@ 0x40
 8001c14:	d126      	bne.n	8001c64 <I2S_IRQHandler+0x92>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d11f      	bne.n	8001c64 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	f043 0202 	orr.w	r2, r3, #2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff50 	bl	8001b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d136      	bne.n	8001cde <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d109      	bne.n	8001c8e <I2S_IRQHandler+0xbc>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c84:	2b80      	cmp	r3, #128	@ 0x80
 8001c86:	d102      	bne.n	8001c8e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff45 	bl	8001b18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d122      	bne.n	8001cde <I2S_IRQHandler+0x10c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d11b      	bne.n	8001cde <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001cb4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd0:	f043 0204 	orr.w	r2, r3, #4
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff13 	bl	8001b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a92      	ldr	r2, [pc, #584]	@ (8001f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d02:	4b92      	ldr	r3, [pc, #584]	@ (8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d04:	e001      	b.n	8001d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a8b      	ldr	r2, [pc, #556]	@ (8001f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d20:	4b8a      	ldr	r3, [pc, #552]	@ (8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d22:	e001      	b.n	8001d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d34:	d004      	beq.n	8001d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 8099 	bne.w	8001e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d107      	bne.n	8001d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f925 	bl	8001fa4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d107      	bne.n	8001d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f9c8 	bl	8002104 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d7a:	2b40      	cmp	r3, #64	@ 0x40
 8001d7c:	d13a      	bne.n	8001df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d035      	beq.n	8001df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001d92:	4b6e      	ldr	r3, [pc, #440]	@ (8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d94:	e001      	b.n	8001d9a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001d96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4969      	ldr	r1, [pc, #420]	@ (8001f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001da2:	428b      	cmp	r3, r1
 8001da4:	d101      	bne.n	8001daa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001da6:	4b69      	ldr	r3, [pc, #420]	@ (8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001da8:	e001      	b.n	8001dae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001daa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001dae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001db2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001dc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f043 0202 	orr.w	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fe88 	bl	8001b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	f040 80c3 	bne.w	8001f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80bd 	beq.w	8001f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a49      	ldr	r2, [pc, #292]	@ (8001f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e26:	4b49      	ldr	r3, [pc, #292]	@ (8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e28:	e001      	b.n	8001e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4944      	ldr	r1, [pc, #272]	@ (8001f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e36:	428b      	cmp	r3, r1
 8001e38:	d101      	bne.n	8001e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e3a:	4b44      	ldr	r3, [pc, #272]	@ (8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e3c:	e001      	b.n	8001e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e46:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f043 0204 	orr.w	r2, r3, #4
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fe4a 	bl	8001b04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e70:	e089      	b.n	8001f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d107      	bne.n	8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8be 	bl	8002008 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8fd 	bl	80020a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eac:	2b40      	cmp	r3, #64	@ 0x40
 8001eae:	d12f      	bne.n	8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d02a      	beq.n	8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ec8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1e      	ldr	r2, [pc, #120]	@ (8001f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ed6:	e001      	b.n	8001edc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001ed8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4919      	ldr	r1, [pc, #100]	@ (8001f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ee4:	428b      	cmp	r3, r1
 8001ee6:	d101      	bne.n	8001eec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001ee8:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001eea:	e001      	b.n	8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001eec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ef0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001ef4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f043 0202 	orr.w	r2, r3, #2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fdfa 	bl	8001b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d136      	bne.n	8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d031      	beq.n	8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a07      	ldr	r2, [pc, #28]	@ (8001f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f2e:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f30:	e001      	b.n	8001f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4902      	ldr	r1, [pc, #8]	@ (8001f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f3e:	428b      	cmp	r3, r1
 8001f40:	d106      	bne.n	8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001f42:	4b02      	ldr	r3, [pc, #8]	@ (8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f44:	e006      	b.n	8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001f46:	bf00      	nop
 8001f48:	40003800 	.word	0x40003800
 8001f4c:	40003400 	.word	0x40003400
 8001f50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f58:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f043 0204 	orr.w	r2, r3, #4
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fdc0 	bl	8001b04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f84:	e000      	b.n	8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f86:	bf00      	nop
}
 8001f88:	bf00      	nop
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	1c99      	adds	r1, r3, #2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6251      	str	r1, [r2, #36]	@ 0x24
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d113      	bne.n	8001ffe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001fe4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d106      	bne.n	8001ffe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ffc9 	bl	8001f90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	1c99      	adds	r1, r3, #2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6251      	str	r1, [r2, #36]	@ 0x24
 800201a:	8819      	ldrh	r1, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1d      	ldr	r2, [pc, #116]	@ (8002098 <I2SEx_TxISR_I2SExt+0x90>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <I2SEx_TxISR_I2SExt+0x22>
 8002026:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <I2SEx_TxISR_I2SExt+0x94>)
 8002028:	e001      	b.n	800202e <I2SEx_TxISR_I2SExt+0x26>
 800202a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800202e:	460a      	mov	r2, r1
 8002030:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d121      	bne.n	800208e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <I2SEx_TxISR_I2SExt+0x90>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d101      	bne.n	8002058 <I2SEx_TxISR_I2SExt+0x50>
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <I2SEx_TxISR_I2SExt+0x94>)
 8002056:	e001      	b.n	800205c <I2SEx_TxISR_I2SExt+0x54>
 8002058:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	490d      	ldr	r1, [pc, #52]	@ (8002098 <I2SEx_TxISR_I2SExt+0x90>)
 8002064:	428b      	cmp	r3, r1
 8002066:	d101      	bne.n	800206c <I2SEx_TxISR_I2SExt+0x64>
 8002068:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <I2SEx_TxISR_I2SExt+0x94>)
 800206a:	e001      	b.n	8002070 <I2SEx_TxISR_I2SExt+0x68>
 800206c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002070:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002074:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d106      	bne.n	800208e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff81 	bl	8001f90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40003800 	.word	0x40003800
 800209c:	40003400 	.word	0x40003400

080020a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68d8      	ldr	r0, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b2:	1c99      	adds	r1, r3, #2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80020b8:	b282      	uxth	r2, r0
 80020ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d113      	bne.n	80020fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ff4a 	bl	8001f90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a20      	ldr	r2, [pc, #128]	@ (8002194 <I2SEx_RxISR_I2SExt+0x90>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <I2SEx_RxISR_I2SExt+0x16>
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <I2SEx_RxISR_I2SExt+0x94>)
 8002118:	e001      	b.n	800211e <I2SEx_RxISR_I2SExt+0x1a>
 800211a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800211e:	68d8      	ldr	r0, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	1c99      	adds	r1, r3, #2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800212a:	b282      	uxth	r2, r0
 800212c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d121      	bne.n	800218a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <I2SEx_RxISR_I2SExt+0x90>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <I2SEx_RxISR_I2SExt+0x50>
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <I2SEx_RxISR_I2SExt+0x94>)
 8002152:	e001      	b.n	8002158 <I2SEx_RxISR_I2SExt+0x54>
 8002154:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	490d      	ldr	r1, [pc, #52]	@ (8002194 <I2SEx_RxISR_I2SExt+0x90>)
 8002160:	428b      	cmp	r3, r1
 8002162:	d101      	bne.n	8002168 <I2SEx_RxISR_I2SExt+0x64>
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <I2SEx_RxISR_I2SExt+0x94>)
 8002166:	e001      	b.n	800216c <I2SEx_RxISR_I2SExt+0x68>
 8002168:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800216c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002170:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d106      	bne.n	800218a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff03 	bl	8001f90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40003800 	.word	0x40003800
 8002198:	40003400 	.word	0x40003400

0800219c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e267      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d075      	beq.n	80022a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ba:	4b88      	ldr	r3, [pc, #544]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d00c      	beq.n	80021e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c6:	4b85      	ldr	r3, [pc, #532]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d112      	bne.n	80021f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d2:	4b82      	ldr	r3, [pc, #520]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021de:	d10b      	bne.n	80021f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	4b7e      	ldr	r3, [pc, #504]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d05b      	beq.n	80022a4 <HAL_RCC_OscConfig+0x108>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d157      	bne.n	80022a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e242      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002200:	d106      	bne.n	8002210 <HAL_RCC_OscConfig+0x74>
 8002202:	4b76      	ldr	r3, [pc, #472]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a75      	ldr	r2, [pc, #468]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e01d      	b.n	800224c <HAL_RCC_OscConfig+0xb0>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x98>
 800221a:	4b70      	ldr	r3, [pc, #448]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a6f      	ldr	r2, [pc, #444]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b6d      	ldr	r3, [pc, #436]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6c      	ldr	r2, [pc, #432]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0xb0>
 8002234:	4b69      	ldr	r3, [pc, #420]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a68      	ldr	r2, [pc, #416]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b66      	ldr	r3, [pc, #408]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a65      	ldr	r2, [pc, #404]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe fef0 	bl	8001038 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7fe feec 	bl	8001038 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	@ 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e207      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b5b      	ldr	r3, [pc, #364]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0xc0>
 800227a:	e014      	b.n	80022a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fedc 	bl	8001038 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe fed8 	bl	8001038 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	@ 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1f3      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	4b51      	ldr	r3, [pc, #324]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0xe8>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d063      	beq.n	800237a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022b2:	4b4a      	ldr	r3, [pc, #296]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022be:	4b47      	ldr	r3, [pc, #284]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d11c      	bne.n	8002304 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ca:	4b44      	ldr	r3, [pc, #272]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d116      	bne.n	8002304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	4b41      	ldr	r3, [pc, #260]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_RCC_OscConfig+0x152>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1c7      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b3b      	ldr	r3, [pc, #236]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4937      	ldr	r1, [pc, #220]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	e03a      	b.n	800237a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230c:	4b34      	ldr	r3, [pc, #208]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002312:	f7fe fe91 	bl	8001038 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231a:	f7fe fe8d 	bl	8001038 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1a8      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	4b2b      	ldr	r3, [pc, #172]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002338:	4b28      	ldr	r3, [pc, #160]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4925      	ldr	r1, [pc, #148]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234e:	4b24      	ldr	r3, [pc, #144]	@ (80023e0 <HAL_RCC_OscConfig+0x244>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fe70 	bl	8001038 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235c:	f7fe fe6c 	bl	8001038 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e187      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d036      	beq.n	80023f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_RCC_OscConfig+0x248>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002394:	f7fe fe50 	bl	8001038 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239c:	f7fe fe4c 	bl	8001038 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e167      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_RCC_OscConfig+0x240>)
 80023b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x200>
 80023ba:	e01b      	b.n	80023f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023bc:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_RCC_OscConfig+0x248>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c2:	f7fe fe39 	bl	8001038 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	e00e      	b.n	80023e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ca:	f7fe fe35 	bl	8001038 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d907      	bls.n	80023e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e150      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
 80023dc:	40023800 	.word	0x40023800
 80023e0:	42470000 	.word	0x42470000
 80023e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	4b88      	ldr	r3, [pc, #544]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80023ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ea      	bne.n	80023ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8097 	beq.w	8002530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b81      	ldr	r3, [pc, #516]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b7d      	ldr	r3, [pc, #500]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	4a7c      	ldr	r2, [pc, #496]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	4b7a      	ldr	r3, [pc, #488]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	4b77      	ldr	r3, [pc, #476]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d118      	bne.n	8002470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243e:	4b74      	ldr	r3, [pc, #464]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a73      	ldr	r2, [pc, #460]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244a:	f7fe fdf5 	bl	8001038 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002452:	f7fe fdf1 	bl	8001038 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e10c      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	4b6a      	ldr	r3, [pc, #424]	@ (8002610 <HAL_RCC_OscConfig+0x474>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x2ea>
 8002478:	4b64      	ldr	r3, [pc, #400]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	4a63      	ldr	r2, [pc, #396]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6713      	str	r3, [r2, #112]	@ 0x70
 8002484:	e01c      	b.n	80024c0 <HAL_RCC_OscConfig+0x324>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b05      	cmp	r3, #5
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x30c>
 800248e:	4b5f      	ldr	r3, [pc, #380]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	4a5e      	ldr	r2, [pc, #376]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	6713      	str	r3, [r2, #112]	@ 0x70
 800249a:	4b5c      	ldr	r3, [pc, #368]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249e:	4a5b      	ldr	r2, [pc, #364]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0x324>
 80024a8:	4b58      	ldr	r3, [pc, #352]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	4a57      	ldr	r2, [pc, #348]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b4:	4b55      	ldr	r3, [pc, #340]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b8:	4a54      	ldr	r2, [pc, #336]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024ba:	f023 0304 	bic.w	r3, r3, #4
 80024be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7fe fdb6 	bl	8001038 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe fdb2 	bl	8001038 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e0cb      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e6:	4b49      	ldr	r3, [pc, #292]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0ee      	beq.n	80024d0 <HAL_RCC_OscConfig+0x334>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fda0 	bl	8001038 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7fe fd9c 	bl	8001038 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e0b5      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002512:	4b3e      	ldr	r3, [pc, #248]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1ee      	bne.n	80024fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002524:	4b39      	ldr	r3, [pc, #228]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	4a38      	ldr	r2, [pc, #224]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800252a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800252e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80a1 	beq.w	800267c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800253a:	4b34      	ldr	r3, [pc, #208]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d05c      	beq.n	8002600 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d141      	bne.n	80025d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <HAL_RCC_OscConfig+0x478>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe fd70 	bl	8001038 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7fe fd6c 	bl	8001038 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e087      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	4b27      	ldr	r3, [pc, #156]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	3b01      	subs	r3, #1
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	491b      	ldr	r1, [pc, #108]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <HAL_RCC_OscConfig+0x478>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fd45 	bl	8001038 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7fe fd41 	bl	8001038 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e05c      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c4:	4b11      	ldr	r3, [pc, #68]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x416>
 80025d0:	e054      	b.n	800267c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <HAL_RCC_OscConfig+0x478>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fd2e 	bl	8001038 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fd2a 	bl	8001038 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e045      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_RCC_OscConfig+0x470>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x444>
 80025fe:	e03d      	b.n	800267c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d107      	bne.n	8002618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e038      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
 800260c:	40023800 	.word	0x40023800
 8002610:	40007000 	.word	0x40007000
 8002614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <HAL_RCC_OscConfig+0x4ec>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d028      	beq.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d121      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d11a      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800264e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002650:	4293      	cmp	r3, r2
 8002652:	d111      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	3b01      	subs	r3, #1
 8002662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d107      	bne.n	8002678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800

0800268c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0cc      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b68      	ldr	r3, [pc, #416]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d90c      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b65      	ldr	r3, [pc, #404]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b63      	ldr	r3, [pc, #396]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b8      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e0:	4b59      	ldr	r3, [pc, #356]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a58      	ldr	r2, [pc, #352]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f8:	4b53      	ldr	r3, [pc, #332]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	4a52      	ldr	r2, [pc, #328]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b50      	ldr	r3, [pc, #320]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	494d      	ldr	r1, [pc, #308]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d044      	beq.n	80027ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b47      	ldr	r3, [pc, #284]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d119      	bne.n	800276a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07f      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d003      	beq.n	800274a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002746:	2b03      	cmp	r3, #3
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274a:	4b3f      	ldr	r3, [pc, #252]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06f      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275a:	4b3b      	ldr	r3, [pc, #236]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e067      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276a:	4b37      	ldr	r3, [pc, #220]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f023 0203 	bic.w	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4934      	ldr	r1, [pc, #208]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	4313      	orrs	r3, r2
 800277a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800277c:	f7fe fc5c 	bl	8001038 <HAL_GetTick>
 8002780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	e00a      	b.n	800279a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002784:	f7fe fc58 	bl	8001038 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e04f      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	4b2b      	ldr	r3, [pc, #172]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 020c 	and.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d1eb      	bne.n	8002784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ac:	4b25      	ldr	r3, [pc, #148]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d20c      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e032      	b.n	800283a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	4b19      	ldr	r3, [pc, #100]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4916      	ldr	r1, [pc, #88]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027fe:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	490e      	ldr	r1, [pc, #56]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002812:	f000 f821 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 8002816:	4602      	mov	r2, r0
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	490a      	ldr	r1, [pc, #40]	@ (800284c <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	5ccb      	ldrb	r3, [r1, r3]
 8002826:	fa22 f303 	lsr.w	r3, r2, r3
 800282a:	4a09      	ldr	r2, [pc, #36]	@ (8002850 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800282e:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fbbc 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023c00 	.word	0x40023c00
 8002848:	40023800 	.word	0x40023800
 800284c:	080037d8 	.word	0x080037d8
 8002850:	20000000 	.word	0x20000000
 8002854:	20000004 	.word	0x20000004

08002858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285c:	b094      	sub	sp, #80	@ 0x50
 800285e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002870:	4b79      	ldr	r3, [pc, #484]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d00d      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x40>
 800287c:	2b08      	cmp	r3, #8
 800287e:	f200 80e1 	bhi.w	8002a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x34>
 8002886:	2b04      	cmp	r3, #4
 8002888:	d003      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x3a>
 800288a:	e0db      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800288c:	4b73      	ldr	r3, [pc, #460]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800288e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002890:	e0db      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002892:	4b73      	ldr	r3, [pc, #460]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002894:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002896:	e0d8      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002898:	4b6f      	ldr	r3, [pc, #444]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d063      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	2200      	movs	r2, #0
 80028b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c2:	2300      	movs	r3, #0
 80028c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80028c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028ca:	4622      	mov	r2, r4
 80028cc:	462b      	mov	r3, r5
 80028ce:	f04f 0000 	mov.w	r0, #0
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	0159      	lsls	r1, r3, #5
 80028d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028dc:	0150      	lsls	r0, r2, #5
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4621      	mov	r1, r4
 80028e4:	1a51      	subs	r1, r2, r1
 80028e6:	6139      	str	r1, [r7, #16]
 80028e8:	4629      	mov	r1, r5
 80028ea:	eb63 0301 	sbc.w	r3, r3, r1
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028fc:	4659      	mov	r1, fp
 80028fe:	018b      	lsls	r3, r1, #6
 8002900:	4651      	mov	r1, sl
 8002902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002906:	4651      	mov	r1, sl
 8002908:	018a      	lsls	r2, r1, #6
 800290a:	4651      	mov	r1, sl
 800290c:	ebb2 0801 	subs.w	r8, r2, r1
 8002910:	4659      	mov	r1, fp
 8002912:	eb63 0901 	sbc.w	r9, r3, r1
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800292a:	4690      	mov	r8, r2
 800292c:	4699      	mov	r9, r3
 800292e:	4623      	mov	r3, r4
 8002930:	eb18 0303 	adds.w	r3, r8, r3
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	462b      	mov	r3, r5
 8002938:	eb49 0303 	adc.w	r3, r9, r3
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800294a:	4629      	mov	r1, r5
 800294c:	024b      	lsls	r3, r1, #9
 800294e:	4621      	mov	r1, r4
 8002950:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002954:	4621      	mov	r1, r4
 8002956:	024a      	lsls	r2, r1, #9
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800295e:	2200      	movs	r2, #0
 8002960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002968:	f7fd fc36 	bl	80001d8 <__aeabi_uldivmod>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4613      	mov	r3, r2
 8002972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002974:	e058      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002976:	4b38      	ldr	r3, [pc, #224]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	2200      	movs	r2, #0
 800297e:	4618      	mov	r0, r3
 8002980:	4611      	mov	r1, r2
 8002982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002986:	623b      	str	r3, [r7, #32]
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
 800298c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002990:	4642      	mov	r2, r8
 8002992:	464b      	mov	r3, r9
 8002994:	f04f 0000 	mov.w	r0, #0
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	0159      	lsls	r1, r3, #5
 800299e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a2:	0150      	lsls	r0, r2, #5
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4641      	mov	r1, r8
 80029aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ae:	4649      	mov	r1, r9
 80029b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029c8:	ebb2 040a 	subs.w	r4, r2, sl
 80029cc:	eb63 050b 	sbc.w	r5, r3, fp
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	00eb      	lsls	r3, r5, #3
 80029da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029de:	00e2      	lsls	r2, r4, #3
 80029e0:	4614      	mov	r4, r2
 80029e2:	461d      	mov	r5, r3
 80029e4:	4643      	mov	r3, r8
 80029e6:	18e3      	adds	r3, r4, r3
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	464b      	mov	r3, r9
 80029ec:	eb45 0303 	adc.w	r3, r5, r3
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029fe:	4629      	mov	r1, r5
 8002a00:	028b      	lsls	r3, r1, #10
 8002a02:	4621      	mov	r1, r4
 8002a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a08:	4621      	mov	r1, r4
 8002a0a:	028a      	lsls	r2, r1, #10
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a12:	2200      	movs	r2, #0
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	61fa      	str	r2, [r7, #28]
 8002a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1c:	f7fd fbdc 	bl	80001d8 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4613      	mov	r3, r2
 8002a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a42:	e002      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3750      	adds	r7, #80	@ 0x50
 8002a50:	46bd      	mov	sp, r7
 8002a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	00f42400 	.word	0x00f42400
 8002a60:	007a1200 	.word	0x007a1200

08002a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a68:	4b03      	ldr	r3, [pc, #12]	@ (8002a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000000 	.word	0x20000000

08002a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a80:	f7ff fff0 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	0a9b      	lsrs	r3, r3, #10
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4903      	ldr	r1, [pc, #12]	@ (8002aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	080037e8 	.word	0x080037e8

08002aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d038      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002acc:	4b68      	ldr	r3, [pc, #416]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fab1 	bl	8001038 <HAL_GetTick>
 8002ad6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ada:	f7fe faad 	bl	8001038 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e0bd      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aec:	4b61      	ldr	r3, [pc, #388]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f0      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	071b      	lsls	r3, r3, #28
 8002b0a:	495a      	ldr	r1, [pc, #360]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b12:	4b57      	ldr	r3, [pc, #348]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b18:	f7fe fa8e 	bl	8001038 <HAL_GetTick>
 8002b1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b20:	f7fe fa8a 	bl	8001038 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e09a      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b32:	4b50      	ldr	r3, [pc, #320]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8083 	beq.w	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	4b48      	ldr	r3, [pc, #288]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	4a47      	ldr	r2, [pc, #284]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5c:	4b45      	ldr	r3, [pc, #276]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b68:	4b43      	ldr	r3, [pc, #268]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a42      	ldr	r2, [pc, #264]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b72:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b74:	f7fe fa60 	bl	8001038 <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7c:	f7fe fa5c 	bl	8001038 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e06c      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b9a:	4b36      	ldr	r3, [pc, #216]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d02f      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d028      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002bce:	4a29      	ldr	r2, [pc, #164]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bd4:	4b27      	ldr	r3, [pc, #156]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d114      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe fa2a 	bl	8001038 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be6:	e00a      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be8:	f7fe fa26 	bl	8001038 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e034      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0ee      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002c18:	4b16      	ldr	r3, [pc, #88]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c2c:	4911      	ldr	r1, [pc, #68]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
 8002c32:	e005      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002c34:	4b0f      	ldr	r3, [pc, #60]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a0e      	ldr	r2, [pc, #56]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002c3e:	6093      	str	r3, [r2, #8]
 8002c40:	4b0c      	ldr	r3, [pc, #48]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	4909      	ldr	r1, [pc, #36]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7d1a      	ldrb	r2, [r3, #20]
 8002c62:	4b07      	ldr	r3, [pc, #28]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002c64:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	42470068 	.word	0x42470068
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	42470e40 	.word	0x42470e40
 8002c80:	424711e0 	.word	0x424711e0

08002c84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d141      	bne.n	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002ca2:	4b25      	ldr	r3, [pc, #148]	@ (8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d006      	beq.n	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cb8:	d131      	bne.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002cba:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002cbc:	617b      	str	r3, [r7, #20]
          break;
 8002cbe:	e031      	b.n	8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002cce:	4b1a      	ldr	r3, [pc, #104]	@ (8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd8:	4a19      	ldr	r2, [pc, #100]	@ (8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002ce2:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cec:	4a15      	ldr	r2, [pc, #84]	@ (8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002cf4:	4b10      	ldr	r3, [pc, #64]	@ (8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d0e:	0f1b      	lsrs	r3, r3, #28
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
          break;
 8002d1c:	e002      	b.n	8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
          break;
 8002d22:	bf00      	nop
        }
      }
      break;
 8002d24:	e000      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8002d26:	bf00      	nop
    }
  }
  return frequency;
 8002d28:	697b      	ldr	r3, [r7, #20]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	00bb8000 	.word	0x00bb8000
 8002d40:	007a1200 	.word	0x007a1200
 8002d44:	00f42400 	.word	0x00f42400

08002d48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07b      	b.n	8002e52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d108      	bne.n	8002d74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d6a:	d009      	beq.n	8002d80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	61da      	str	r2, [r3, #28]
 8002d72:	e005      	b.n	8002d80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fd ffac 	bl	8000cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002db6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e04:	ea42 0103 	orr.w	r1, r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	0c1b      	lsrs	r3, r3, #16
 8002e1e:	f003 0104 	and.w	r1, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	f003 0210 	and.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <std>:
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	b510      	push	{r4, lr}
 8002e60:	4604      	mov	r4, r0
 8002e62:	e9c0 3300 	strd	r3, r3, [r0]
 8002e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e6a:	6083      	str	r3, [r0, #8]
 8002e6c:	8181      	strh	r1, [r0, #12]
 8002e6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002e70:	81c2      	strh	r2, [r0, #14]
 8002e72:	6183      	str	r3, [r0, #24]
 8002e74:	4619      	mov	r1, r3
 8002e76:	2208      	movs	r2, #8
 8002e78:	305c      	adds	r0, #92	@ 0x5c
 8002e7a:	f000 f9e7 	bl	800324c <memset>
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <std+0x58>)
 8002e80:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e82:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <std+0x5c>)
 8002e84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002e86:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <std+0x60>)
 8002e88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec0 <std+0x64>)
 8002e8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec4 <std+0x68>)
 8002e90:	6224      	str	r4, [r4, #32]
 8002e92:	429c      	cmp	r4, r3
 8002e94:	d006      	beq.n	8002ea4 <std+0x48>
 8002e96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002e9a:	4294      	cmp	r4, r2
 8002e9c:	d002      	beq.n	8002ea4 <std+0x48>
 8002e9e:	33d0      	adds	r3, #208	@ 0xd0
 8002ea0:	429c      	cmp	r4, r3
 8002ea2:	d105      	bne.n	8002eb0 <std+0x54>
 8002ea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eac:	f000 ba46 	b.w	800333c <__retarget_lock_init_recursive>
 8002eb0:	bd10      	pop	{r4, pc}
 8002eb2:	bf00      	nop
 8002eb4:	0800309d 	.word	0x0800309d
 8002eb8:	080030bf 	.word	0x080030bf
 8002ebc:	080030f7 	.word	0x080030f7
 8002ec0:	0800311b 	.word	0x0800311b
 8002ec4:	200001cc 	.word	0x200001cc

08002ec8 <stdio_exit_handler>:
 8002ec8:	4a02      	ldr	r2, [pc, #8]	@ (8002ed4 <stdio_exit_handler+0xc>)
 8002eca:	4903      	ldr	r1, [pc, #12]	@ (8002ed8 <stdio_exit_handler+0x10>)
 8002ecc:	4803      	ldr	r0, [pc, #12]	@ (8002edc <stdio_exit_handler+0x14>)
 8002ece:	f000 b869 	b.w	8002fa4 <_fwalk_sglue>
 8002ed2:	bf00      	nop
 8002ed4:	2000000c 	.word	0x2000000c
 8002ed8:	0800363d 	.word	0x0800363d
 8002edc:	2000001c 	.word	0x2000001c

08002ee0 <cleanup_stdio>:
 8002ee0:	6841      	ldr	r1, [r0, #4]
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <cleanup_stdio+0x34>)
 8002ee4:	4299      	cmp	r1, r3
 8002ee6:	b510      	push	{r4, lr}
 8002ee8:	4604      	mov	r4, r0
 8002eea:	d001      	beq.n	8002ef0 <cleanup_stdio+0x10>
 8002eec:	f000 fba6 	bl	800363c <_fflush_r>
 8002ef0:	68a1      	ldr	r1, [r4, #8]
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <cleanup_stdio+0x38>)
 8002ef4:	4299      	cmp	r1, r3
 8002ef6:	d002      	beq.n	8002efe <cleanup_stdio+0x1e>
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f000 fb9f 	bl	800363c <_fflush_r>
 8002efe:	68e1      	ldr	r1, [r4, #12]
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <cleanup_stdio+0x3c>)
 8002f02:	4299      	cmp	r1, r3
 8002f04:	d004      	beq.n	8002f10 <cleanup_stdio+0x30>
 8002f06:	4620      	mov	r0, r4
 8002f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f0c:	f000 bb96 	b.w	800363c <_fflush_r>
 8002f10:	bd10      	pop	{r4, pc}
 8002f12:	bf00      	nop
 8002f14:	200001cc 	.word	0x200001cc
 8002f18:	20000234 	.word	0x20000234
 8002f1c:	2000029c 	.word	0x2000029c

08002f20 <global_stdio_init.part.0>:
 8002f20:	b510      	push	{r4, lr}
 8002f22:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <global_stdio_init.part.0+0x30>)
 8002f24:	4c0b      	ldr	r4, [pc, #44]	@ (8002f54 <global_stdio_init.part.0+0x34>)
 8002f26:	4a0c      	ldr	r2, [pc, #48]	@ (8002f58 <global_stdio_init.part.0+0x38>)
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2104      	movs	r1, #4
 8002f30:	f7ff ff94 	bl	8002e5c <std>
 8002f34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2109      	movs	r1, #9
 8002f3c:	f7ff ff8e 	bl	8002e5c <std>
 8002f40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f44:	2202      	movs	r2, #2
 8002f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f4a:	2112      	movs	r1, #18
 8002f4c:	f7ff bf86 	b.w	8002e5c <std>
 8002f50:	20000304 	.word	0x20000304
 8002f54:	200001cc 	.word	0x200001cc
 8002f58:	08002ec9 	.word	0x08002ec9

08002f5c <__sfp_lock_acquire>:
 8002f5c:	4801      	ldr	r0, [pc, #4]	@ (8002f64 <__sfp_lock_acquire+0x8>)
 8002f5e:	f000 b9ee 	b.w	800333e <__retarget_lock_acquire_recursive>
 8002f62:	bf00      	nop
 8002f64:	2000030d 	.word	0x2000030d

08002f68 <__sfp_lock_release>:
 8002f68:	4801      	ldr	r0, [pc, #4]	@ (8002f70 <__sfp_lock_release+0x8>)
 8002f6a:	f000 b9e9 	b.w	8003340 <__retarget_lock_release_recursive>
 8002f6e:	bf00      	nop
 8002f70:	2000030d 	.word	0x2000030d

08002f74 <__sinit>:
 8002f74:	b510      	push	{r4, lr}
 8002f76:	4604      	mov	r4, r0
 8002f78:	f7ff fff0 	bl	8002f5c <__sfp_lock_acquire>
 8002f7c:	6a23      	ldr	r3, [r4, #32]
 8002f7e:	b11b      	cbz	r3, 8002f88 <__sinit+0x14>
 8002f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f84:	f7ff bff0 	b.w	8002f68 <__sfp_lock_release>
 8002f88:	4b04      	ldr	r3, [pc, #16]	@ (8002f9c <__sinit+0x28>)
 8002f8a:	6223      	str	r3, [r4, #32]
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <__sinit+0x2c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f5      	bne.n	8002f80 <__sinit+0xc>
 8002f94:	f7ff ffc4 	bl	8002f20 <global_stdio_init.part.0>
 8002f98:	e7f2      	b.n	8002f80 <__sinit+0xc>
 8002f9a:	bf00      	nop
 8002f9c:	08002ee1 	.word	0x08002ee1
 8002fa0:	20000304 	.word	0x20000304

08002fa4 <_fwalk_sglue>:
 8002fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fa8:	4607      	mov	r7, r0
 8002faa:	4688      	mov	r8, r1
 8002fac:	4614      	mov	r4, r2
 8002fae:	2600      	movs	r6, #0
 8002fb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fb4:	f1b9 0901 	subs.w	r9, r9, #1
 8002fb8:	d505      	bpl.n	8002fc6 <_fwalk_sglue+0x22>
 8002fba:	6824      	ldr	r4, [r4, #0]
 8002fbc:	2c00      	cmp	r4, #0
 8002fbe:	d1f7      	bne.n	8002fb0 <_fwalk_sglue+0xc>
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fc6:	89ab      	ldrh	r3, [r5, #12]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d907      	bls.n	8002fdc <_fwalk_sglue+0x38>
 8002fcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	d003      	beq.n	8002fdc <_fwalk_sglue+0x38>
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	4638      	mov	r0, r7
 8002fd8:	47c0      	blx	r8
 8002fda:	4306      	orrs	r6, r0
 8002fdc:	3568      	adds	r5, #104	@ 0x68
 8002fde:	e7e9      	b.n	8002fb4 <_fwalk_sglue+0x10>

08002fe0 <_puts_r>:
 8002fe0:	6a03      	ldr	r3, [r0, #32]
 8002fe2:	b570      	push	{r4, r5, r6, lr}
 8002fe4:	6884      	ldr	r4, [r0, #8]
 8002fe6:	4605      	mov	r5, r0
 8002fe8:	460e      	mov	r6, r1
 8002fea:	b90b      	cbnz	r3, 8002ff0 <_puts_r+0x10>
 8002fec:	f7ff ffc2 	bl	8002f74 <__sinit>
 8002ff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ff2:	07db      	lsls	r3, r3, #31
 8002ff4:	d405      	bmi.n	8003002 <_puts_r+0x22>
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	0598      	lsls	r0, r3, #22
 8002ffa:	d402      	bmi.n	8003002 <_puts_r+0x22>
 8002ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ffe:	f000 f99e 	bl	800333e <__retarget_lock_acquire_recursive>
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	0719      	lsls	r1, r3, #28
 8003006:	d502      	bpl.n	800300e <_puts_r+0x2e>
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d135      	bne.n	800307a <_puts_r+0x9a>
 800300e:	4621      	mov	r1, r4
 8003010:	4628      	mov	r0, r5
 8003012:	f000 f8c5 	bl	80031a0 <__swsetup_r>
 8003016:	b380      	cbz	r0, 800307a <_puts_r+0x9a>
 8003018:	f04f 35ff 	mov.w	r5, #4294967295
 800301c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800301e:	07da      	lsls	r2, r3, #31
 8003020:	d405      	bmi.n	800302e <_puts_r+0x4e>
 8003022:	89a3      	ldrh	r3, [r4, #12]
 8003024:	059b      	lsls	r3, r3, #22
 8003026:	d402      	bmi.n	800302e <_puts_r+0x4e>
 8003028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800302a:	f000 f989 	bl	8003340 <__retarget_lock_release_recursive>
 800302e:	4628      	mov	r0, r5
 8003030:	bd70      	pop	{r4, r5, r6, pc}
 8003032:	2b00      	cmp	r3, #0
 8003034:	da04      	bge.n	8003040 <_puts_r+0x60>
 8003036:	69a2      	ldr	r2, [r4, #24]
 8003038:	429a      	cmp	r2, r3
 800303a:	dc17      	bgt.n	800306c <_puts_r+0x8c>
 800303c:	290a      	cmp	r1, #10
 800303e:	d015      	beq.n	800306c <_puts_r+0x8c>
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	6022      	str	r2, [r4, #0]
 8003046:	7019      	strb	r1, [r3, #0]
 8003048:	68a3      	ldr	r3, [r4, #8]
 800304a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800304e:	3b01      	subs	r3, #1
 8003050:	60a3      	str	r3, [r4, #8]
 8003052:	2900      	cmp	r1, #0
 8003054:	d1ed      	bne.n	8003032 <_puts_r+0x52>
 8003056:	2b00      	cmp	r3, #0
 8003058:	da11      	bge.n	800307e <_puts_r+0x9e>
 800305a:	4622      	mov	r2, r4
 800305c:	210a      	movs	r1, #10
 800305e:	4628      	mov	r0, r5
 8003060:	f000 f85f 	bl	8003122 <__swbuf_r>
 8003064:	3001      	adds	r0, #1
 8003066:	d0d7      	beq.n	8003018 <_puts_r+0x38>
 8003068:	250a      	movs	r5, #10
 800306a:	e7d7      	b.n	800301c <_puts_r+0x3c>
 800306c:	4622      	mov	r2, r4
 800306e:	4628      	mov	r0, r5
 8003070:	f000 f857 	bl	8003122 <__swbuf_r>
 8003074:	3001      	adds	r0, #1
 8003076:	d1e7      	bne.n	8003048 <_puts_r+0x68>
 8003078:	e7ce      	b.n	8003018 <_puts_r+0x38>
 800307a:	3e01      	subs	r6, #1
 800307c:	e7e4      	b.n	8003048 <_puts_r+0x68>
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	6022      	str	r2, [r4, #0]
 8003084:	220a      	movs	r2, #10
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e7ee      	b.n	8003068 <_puts_r+0x88>
	...

0800308c <puts>:
 800308c:	4b02      	ldr	r3, [pc, #8]	@ (8003098 <puts+0xc>)
 800308e:	4601      	mov	r1, r0
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	f7ff bfa5 	b.w	8002fe0 <_puts_r>
 8003096:	bf00      	nop
 8003098:	20000018 	.word	0x20000018

0800309c <__sread>:
 800309c:	b510      	push	{r4, lr}
 800309e:	460c      	mov	r4, r1
 80030a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030a4:	f000 f8fc 	bl	80032a0 <_read_r>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	bfab      	itete	ge
 80030ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80030ae:	89a3      	ldrhlt	r3, [r4, #12]
 80030b0:	181b      	addge	r3, r3, r0
 80030b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80030b6:	bfac      	ite	ge
 80030b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80030ba:	81a3      	strhlt	r3, [r4, #12]
 80030bc:	bd10      	pop	{r4, pc}

080030be <__swrite>:
 80030be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c2:	461f      	mov	r7, r3
 80030c4:	898b      	ldrh	r3, [r1, #12]
 80030c6:	05db      	lsls	r3, r3, #23
 80030c8:	4605      	mov	r5, r0
 80030ca:	460c      	mov	r4, r1
 80030cc:	4616      	mov	r6, r2
 80030ce:	d505      	bpl.n	80030dc <__swrite+0x1e>
 80030d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030d4:	2302      	movs	r3, #2
 80030d6:	2200      	movs	r2, #0
 80030d8:	f000 f8d0 	bl	800327c <_lseek_r>
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030e6:	81a3      	strh	r3, [r4, #12]
 80030e8:	4632      	mov	r2, r6
 80030ea:	463b      	mov	r3, r7
 80030ec:	4628      	mov	r0, r5
 80030ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030f2:	f000 b8e7 	b.w	80032c4 <_write_r>

080030f6 <__sseek>:
 80030f6:	b510      	push	{r4, lr}
 80030f8:	460c      	mov	r4, r1
 80030fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030fe:	f000 f8bd 	bl	800327c <_lseek_r>
 8003102:	1c43      	adds	r3, r0, #1
 8003104:	89a3      	ldrh	r3, [r4, #12]
 8003106:	bf15      	itete	ne
 8003108:	6560      	strne	r0, [r4, #84]	@ 0x54
 800310a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800310e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003112:	81a3      	strheq	r3, [r4, #12]
 8003114:	bf18      	it	ne
 8003116:	81a3      	strhne	r3, [r4, #12]
 8003118:	bd10      	pop	{r4, pc}

0800311a <__sclose>:
 800311a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800311e:	f000 b89d 	b.w	800325c <_close_r>

08003122 <__swbuf_r>:
 8003122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003124:	460e      	mov	r6, r1
 8003126:	4614      	mov	r4, r2
 8003128:	4605      	mov	r5, r0
 800312a:	b118      	cbz	r0, 8003134 <__swbuf_r+0x12>
 800312c:	6a03      	ldr	r3, [r0, #32]
 800312e:	b90b      	cbnz	r3, 8003134 <__swbuf_r+0x12>
 8003130:	f7ff ff20 	bl	8002f74 <__sinit>
 8003134:	69a3      	ldr	r3, [r4, #24]
 8003136:	60a3      	str	r3, [r4, #8]
 8003138:	89a3      	ldrh	r3, [r4, #12]
 800313a:	071a      	lsls	r2, r3, #28
 800313c:	d501      	bpl.n	8003142 <__swbuf_r+0x20>
 800313e:	6923      	ldr	r3, [r4, #16]
 8003140:	b943      	cbnz	r3, 8003154 <__swbuf_r+0x32>
 8003142:	4621      	mov	r1, r4
 8003144:	4628      	mov	r0, r5
 8003146:	f000 f82b 	bl	80031a0 <__swsetup_r>
 800314a:	b118      	cbz	r0, 8003154 <__swbuf_r+0x32>
 800314c:	f04f 37ff 	mov.w	r7, #4294967295
 8003150:	4638      	mov	r0, r7
 8003152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	6922      	ldr	r2, [r4, #16]
 8003158:	1a98      	subs	r0, r3, r2
 800315a:	6963      	ldr	r3, [r4, #20]
 800315c:	b2f6      	uxtb	r6, r6
 800315e:	4283      	cmp	r3, r0
 8003160:	4637      	mov	r7, r6
 8003162:	dc05      	bgt.n	8003170 <__swbuf_r+0x4e>
 8003164:	4621      	mov	r1, r4
 8003166:	4628      	mov	r0, r5
 8003168:	f000 fa68 	bl	800363c <_fflush_r>
 800316c:	2800      	cmp	r0, #0
 800316e:	d1ed      	bne.n	800314c <__swbuf_r+0x2a>
 8003170:	68a3      	ldr	r3, [r4, #8]
 8003172:	3b01      	subs	r3, #1
 8003174:	60a3      	str	r3, [r4, #8]
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	6022      	str	r2, [r4, #0]
 800317c:	701e      	strb	r6, [r3, #0]
 800317e:	6962      	ldr	r2, [r4, #20]
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	429a      	cmp	r2, r3
 8003184:	d004      	beq.n	8003190 <__swbuf_r+0x6e>
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	07db      	lsls	r3, r3, #31
 800318a:	d5e1      	bpl.n	8003150 <__swbuf_r+0x2e>
 800318c:	2e0a      	cmp	r6, #10
 800318e:	d1df      	bne.n	8003150 <__swbuf_r+0x2e>
 8003190:	4621      	mov	r1, r4
 8003192:	4628      	mov	r0, r5
 8003194:	f000 fa52 	bl	800363c <_fflush_r>
 8003198:	2800      	cmp	r0, #0
 800319a:	d0d9      	beq.n	8003150 <__swbuf_r+0x2e>
 800319c:	e7d6      	b.n	800314c <__swbuf_r+0x2a>
	...

080031a0 <__swsetup_r>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <__swsetup_r+0xa8>)
 80031a4:	4605      	mov	r5, r0
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	460c      	mov	r4, r1
 80031aa:	b118      	cbz	r0, 80031b4 <__swsetup_r+0x14>
 80031ac:	6a03      	ldr	r3, [r0, #32]
 80031ae:	b90b      	cbnz	r3, 80031b4 <__swsetup_r+0x14>
 80031b0:	f7ff fee0 	bl	8002f74 <__sinit>
 80031b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031b8:	0719      	lsls	r1, r3, #28
 80031ba:	d422      	bmi.n	8003202 <__swsetup_r+0x62>
 80031bc:	06da      	lsls	r2, r3, #27
 80031be:	d407      	bmi.n	80031d0 <__swsetup_r+0x30>
 80031c0:	2209      	movs	r2, #9
 80031c2:	602a      	str	r2, [r5, #0]
 80031c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031c8:	81a3      	strh	r3, [r4, #12]
 80031ca:	f04f 30ff 	mov.w	r0, #4294967295
 80031ce:	e033      	b.n	8003238 <__swsetup_r+0x98>
 80031d0:	0758      	lsls	r0, r3, #29
 80031d2:	d512      	bpl.n	80031fa <__swsetup_r+0x5a>
 80031d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031d6:	b141      	cbz	r1, 80031ea <__swsetup_r+0x4a>
 80031d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80031dc:	4299      	cmp	r1, r3
 80031de:	d002      	beq.n	80031e6 <__swsetup_r+0x46>
 80031e0:	4628      	mov	r0, r5
 80031e2:	f000 f8af 	bl	8003344 <_free_r>
 80031e6:	2300      	movs	r3, #0
 80031e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80031f0:	81a3      	strh	r3, [r4, #12]
 80031f2:	2300      	movs	r3, #0
 80031f4:	6063      	str	r3, [r4, #4]
 80031f6:	6923      	ldr	r3, [r4, #16]
 80031f8:	6023      	str	r3, [r4, #0]
 80031fa:	89a3      	ldrh	r3, [r4, #12]
 80031fc:	f043 0308 	orr.w	r3, r3, #8
 8003200:	81a3      	strh	r3, [r4, #12]
 8003202:	6923      	ldr	r3, [r4, #16]
 8003204:	b94b      	cbnz	r3, 800321a <__swsetup_r+0x7a>
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800320c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003210:	d003      	beq.n	800321a <__swsetup_r+0x7a>
 8003212:	4621      	mov	r1, r4
 8003214:	4628      	mov	r0, r5
 8003216:	f000 fa5f 	bl	80036d8 <__smakebuf_r>
 800321a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800321e:	f013 0201 	ands.w	r2, r3, #1
 8003222:	d00a      	beq.n	800323a <__swsetup_r+0x9a>
 8003224:	2200      	movs	r2, #0
 8003226:	60a2      	str	r2, [r4, #8]
 8003228:	6962      	ldr	r2, [r4, #20]
 800322a:	4252      	negs	r2, r2
 800322c:	61a2      	str	r2, [r4, #24]
 800322e:	6922      	ldr	r2, [r4, #16]
 8003230:	b942      	cbnz	r2, 8003244 <__swsetup_r+0xa4>
 8003232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003236:	d1c5      	bne.n	80031c4 <__swsetup_r+0x24>
 8003238:	bd38      	pop	{r3, r4, r5, pc}
 800323a:	0799      	lsls	r1, r3, #30
 800323c:	bf58      	it	pl
 800323e:	6962      	ldrpl	r2, [r4, #20]
 8003240:	60a2      	str	r2, [r4, #8]
 8003242:	e7f4      	b.n	800322e <__swsetup_r+0x8e>
 8003244:	2000      	movs	r0, #0
 8003246:	e7f7      	b.n	8003238 <__swsetup_r+0x98>
 8003248:	20000018 	.word	0x20000018

0800324c <memset>:
 800324c:	4402      	add	r2, r0
 800324e:	4603      	mov	r3, r0
 8003250:	4293      	cmp	r3, r2
 8003252:	d100      	bne.n	8003256 <memset+0xa>
 8003254:	4770      	bx	lr
 8003256:	f803 1b01 	strb.w	r1, [r3], #1
 800325a:	e7f9      	b.n	8003250 <memset+0x4>

0800325c <_close_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	4d06      	ldr	r5, [pc, #24]	@ (8003278 <_close_r+0x1c>)
 8003260:	2300      	movs	r3, #0
 8003262:	4604      	mov	r4, r0
 8003264:	4608      	mov	r0, r1
 8003266:	602b      	str	r3, [r5, #0]
 8003268:	f7fd fdda 	bl	8000e20 <_close>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d102      	bne.n	8003276 <_close_r+0x1a>
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	b103      	cbz	r3, 8003276 <_close_r+0x1a>
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	bd38      	pop	{r3, r4, r5, pc}
 8003278:	20000308 	.word	0x20000308

0800327c <_lseek_r>:
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	4d07      	ldr	r5, [pc, #28]	@ (800329c <_lseek_r+0x20>)
 8003280:	4604      	mov	r4, r0
 8003282:	4608      	mov	r0, r1
 8003284:	4611      	mov	r1, r2
 8003286:	2200      	movs	r2, #0
 8003288:	602a      	str	r2, [r5, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	f7fd fdef 	bl	8000e6e <_lseek>
 8003290:	1c43      	adds	r3, r0, #1
 8003292:	d102      	bne.n	800329a <_lseek_r+0x1e>
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	b103      	cbz	r3, 800329a <_lseek_r+0x1e>
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	bd38      	pop	{r3, r4, r5, pc}
 800329c:	20000308 	.word	0x20000308

080032a0 <_read_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4d07      	ldr	r5, [pc, #28]	@ (80032c0 <_read_r+0x20>)
 80032a4:	4604      	mov	r4, r0
 80032a6:	4608      	mov	r0, r1
 80032a8:	4611      	mov	r1, r2
 80032aa:	2200      	movs	r2, #0
 80032ac:	602a      	str	r2, [r5, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f7fd fd99 	bl	8000de6 <_read>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d102      	bne.n	80032be <_read_r+0x1e>
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	b103      	cbz	r3, 80032be <_read_r+0x1e>
 80032bc:	6023      	str	r3, [r4, #0]
 80032be:	bd38      	pop	{r3, r4, r5, pc}
 80032c0:	20000308 	.word	0x20000308

080032c4 <_write_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	4d07      	ldr	r5, [pc, #28]	@ (80032e4 <_write_r+0x20>)
 80032c8:	4604      	mov	r4, r0
 80032ca:	4608      	mov	r0, r1
 80032cc:	4611      	mov	r1, r2
 80032ce:	2200      	movs	r2, #0
 80032d0:	602a      	str	r2, [r5, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f7fd f91f 	bl	8000516 <_write>
 80032d8:	1c43      	adds	r3, r0, #1
 80032da:	d102      	bne.n	80032e2 <_write_r+0x1e>
 80032dc:	682b      	ldr	r3, [r5, #0]
 80032de:	b103      	cbz	r3, 80032e2 <_write_r+0x1e>
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	bd38      	pop	{r3, r4, r5, pc}
 80032e4:	20000308 	.word	0x20000308

080032e8 <__errno>:
 80032e8:	4b01      	ldr	r3, [pc, #4]	@ (80032f0 <__errno+0x8>)
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000018 	.word	0x20000018

080032f4 <__libc_init_array>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	4d0d      	ldr	r5, [pc, #52]	@ (800332c <__libc_init_array+0x38>)
 80032f8:	4c0d      	ldr	r4, [pc, #52]	@ (8003330 <__libc_init_array+0x3c>)
 80032fa:	1b64      	subs	r4, r4, r5
 80032fc:	10a4      	asrs	r4, r4, #2
 80032fe:	2600      	movs	r6, #0
 8003300:	42a6      	cmp	r6, r4
 8003302:	d109      	bne.n	8003318 <__libc_init_array+0x24>
 8003304:	4d0b      	ldr	r5, [pc, #44]	@ (8003334 <__libc_init_array+0x40>)
 8003306:	4c0c      	ldr	r4, [pc, #48]	@ (8003338 <__libc_init_array+0x44>)
 8003308:	f000 fa54 	bl	80037b4 <_init>
 800330c:	1b64      	subs	r4, r4, r5
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	2600      	movs	r6, #0
 8003312:	42a6      	cmp	r6, r4
 8003314:	d105      	bne.n	8003322 <__libc_init_array+0x2e>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	f855 3b04 	ldr.w	r3, [r5], #4
 800331c:	4798      	blx	r3
 800331e:	3601      	adds	r6, #1
 8003320:	e7ee      	b.n	8003300 <__libc_init_array+0xc>
 8003322:	f855 3b04 	ldr.w	r3, [r5], #4
 8003326:	4798      	blx	r3
 8003328:	3601      	adds	r6, #1
 800332a:	e7f2      	b.n	8003312 <__libc_init_array+0x1e>
 800332c:	080037f8 	.word	0x080037f8
 8003330:	080037f8 	.word	0x080037f8
 8003334:	080037f8 	.word	0x080037f8
 8003338:	080037fc 	.word	0x080037fc

0800333c <__retarget_lock_init_recursive>:
 800333c:	4770      	bx	lr

0800333e <__retarget_lock_acquire_recursive>:
 800333e:	4770      	bx	lr

08003340 <__retarget_lock_release_recursive>:
 8003340:	4770      	bx	lr
	...

08003344 <_free_r>:
 8003344:	b538      	push	{r3, r4, r5, lr}
 8003346:	4605      	mov	r5, r0
 8003348:	2900      	cmp	r1, #0
 800334a:	d041      	beq.n	80033d0 <_free_r+0x8c>
 800334c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003350:	1f0c      	subs	r4, r1, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	bfb8      	it	lt
 8003356:	18e4      	addlt	r4, r4, r3
 8003358:	f000 f8e0 	bl	800351c <__malloc_lock>
 800335c:	4a1d      	ldr	r2, [pc, #116]	@ (80033d4 <_free_r+0x90>)
 800335e:	6813      	ldr	r3, [r2, #0]
 8003360:	b933      	cbnz	r3, 8003370 <_free_r+0x2c>
 8003362:	6063      	str	r3, [r4, #4]
 8003364:	6014      	str	r4, [r2, #0]
 8003366:	4628      	mov	r0, r5
 8003368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800336c:	f000 b8dc 	b.w	8003528 <__malloc_unlock>
 8003370:	42a3      	cmp	r3, r4
 8003372:	d908      	bls.n	8003386 <_free_r+0x42>
 8003374:	6820      	ldr	r0, [r4, #0]
 8003376:	1821      	adds	r1, r4, r0
 8003378:	428b      	cmp	r3, r1
 800337a:	bf01      	itttt	eq
 800337c:	6819      	ldreq	r1, [r3, #0]
 800337e:	685b      	ldreq	r3, [r3, #4]
 8003380:	1809      	addeq	r1, r1, r0
 8003382:	6021      	streq	r1, [r4, #0]
 8003384:	e7ed      	b.n	8003362 <_free_r+0x1e>
 8003386:	461a      	mov	r2, r3
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	b10b      	cbz	r3, 8003390 <_free_r+0x4c>
 800338c:	42a3      	cmp	r3, r4
 800338e:	d9fa      	bls.n	8003386 <_free_r+0x42>
 8003390:	6811      	ldr	r1, [r2, #0]
 8003392:	1850      	adds	r0, r2, r1
 8003394:	42a0      	cmp	r0, r4
 8003396:	d10b      	bne.n	80033b0 <_free_r+0x6c>
 8003398:	6820      	ldr	r0, [r4, #0]
 800339a:	4401      	add	r1, r0
 800339c:	1850      	adds	r0, r2, r1
 800339e:	4283      	cmp	r3, r0
 80033a0:	6011      	str	r1, [r2, #0]
 80033a2:	d1e0      	bne.n	8003366 <_free_r+0x22>
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	6053      	str	r3, [r2, #4]
 80033aa:	4408      	add	r0, r1
 80033ac:	6010      	str	r0, [r2, #0]
 80033ae:	e7da      	b.n	8003366 <_free_r+0x22>
 80033b0:	d902      	bls.n	80033b8 <_free_r+0x74>
 80033b2:	230c      	movs	r3, #12
 80033b4:	602b      	str	r3, [r5, #0]
 80033b6:	e7d6      	b.n	8003366 <_free_r+0x22>
 80033b8:	6820      	ldr	r0, [r4, #0]
 80033ba:	1821      	adds	r1, r4, r0
 80033bc:	428b      	cmp	r3, r1
 80033be:	bf04      	itt	eq
 80033c0:	6819      	ldreq	r1, [r3, #0]
 80033c2:	685b      	ldreq	r3, [r3, #4]
 80033c4:	6063      	str	r3, [r4, #4]
 80033c6:	bf04      	itt	eq
 80033c8:	1809      	addeq	r1, r1, r0
 80033ca:	6021      	streq	r1, [r4, #0]
 80033cc:	6054      	str	r4, [r2, #4]
 80033ce:	e7ca      	b.n	8003366 <_free_r+0x22>
 80033d0:	bd38      	pop	{r3, r4, r5, pc}
 80033d2:	bf00      	nop
 80033d4:	20000314 	.word	0x20000314

080033d8 <sbrk_aligned>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	4e0f      	ldr	r6, [pc, #60]	@ (8003418 <sbrk_aligned+0x40>)
 80033dc:	460c      	mov	r4, r1
 80033de:	6831      	ldr	r1, [r6, #0]
 80033e0:	4605      	mov	r5, r0
 80033e2:	b911      	cbnz	r1, 80033ea <sbrk_aligned+0x12>
 80033e4:	f000 f9d6 	bl	8003794 <_sbrk_r>
 80033e8:	6030      	str	r0, [r6, #0]
 80033ea:	4621      	mov	r1, r4
 80033ec:	4628      	mov	r0, r5
 80033ee:	f000 f9d1 	bl	8003794 <_sbrk_r>
 80033f2:	1c43      	adds	r3, r0, #1
 80033f4:	d103      	bne.n	80033fe <sbrk_aligned+0x26>
 80033f6:	f04f 34ff 	mov.w	r4, #4294967295
 80033fa:	4620      	mov	r0, r4
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	1cc4      	adds	r4, r0, #3
 8003400:	f024 0403 	bic.w	r4, r4, #3
 8003404:	42a0      	cmp	r0, r4
 8003406:	d0f8      	beq.n	80033fa <sbrk_aligned+0x22>
 8003408:	1a21      	subs	r1, r4, r0
 800340a:	4628      	mov	r0, r5
 800340c:	f000 f9c2 	bl	8003794 <_sbrk_r>
 8003410:	3001      	adds	r0, #1
 8003412:	d1f2      	bne.n	80033fa <sbrk_aligned+0x22>
 8003414:	e7ef      	b.n	80033f6 <sbrk_aligned+0x1e>
 8003416:	bf00      	nop
 8003418:	20000310 	.word	0x20000310

0800341c <_malloc_r>:
 800341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003420:	1ccd      	adds	r5, r1, #3
 8003422:	f025 0503 	bic.w	r5, r5, #3
 8003426:	3508      	adds	r5, #8
 8003428:	2d0c      	cmp	r5, #12
 800342a:	bf38      	it	cc
 800342c:	250c      	movcc	r5, #12
 800342e:	2d00      	cmp	r5, #0
 8003430:	4606      	mov	r6, r0
 8003432:	db01      	blt.n	8003438 <_malloc_r+0x1c>
 8003434:	42a9      	cmp	r1, r5
 8003436:	d904      	bls.n	8003442 <_malloc_r+0x26>
 8003438:	230c      	movs	r3, #12
 800343a:	6033      	str	r3, [r6, #0]
 800343c:	2000      	movs	r0, #0
 800343e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003518 <_malloc_r+0xfc>
 8003446:	f000 f869 	bl	800351c <__malloc_lock>
 800344a:	f8d8 3000 	ldr.w	r3, [r8]
 800344e:	461c      	mov	r4, r3
 8003450:	bb44      	cbnz	r4, 80034a4 <_malloc_r+0x88>
 8003452:	4629      	mov	r1, r5
 8003454:	4630      	mov	r0, r6
 8003456:	f7ff ffbf 	bl	80033d8 <sbrk_aligned>
 800345a:	1c43      	adds	r3, r0, #1
 800345c:	4604      	mov	r4, r0
 800345e:	d158      	bne.n	8003512 <_malloc_r+0xf6>
 8003460:	f8d8 4000 	ldr.w	r4, [r8]
 8003464:	4627      	mov	r7, r4
 8003466:	2f00      	cmp	r7, #0
 8003468:	d143      	bne.n	80034f2 <_malloc_r+0xd6>
 800346a:	2c00      	cmp	r4, #0
 800346c:	d04b      	beq.n	8003506 <_malloc_r+0xea>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	4639      	mov	r1, r7
 8003472:	4630      	mov	r0, r6
 8003474:	eb04 0903 	add.w	r9, r4, r3
 8003478:	f000 f98c 	bl	8003794 <_sbrk_r>
 800347c:	4581      	cmp	r9, r0
 800347e:	d142      	bne.n	8003506 <_malloc_r+0xea>
 8003480:	6821      	ldr	r1, [r4, #0]
 8003482:	1a6d      	subs	r5, r5, r1
 8003484:	4629      	mov	r1, r5
 8003486:	4630      	mov	r0, r6
 8003488:	f7ff ffa6 	bl	80033d8 <sbrk_aligned>
 800348c:	3001      	adds	r0, #1
 800348e:	d03a      	beq.n	8003506 <_malloc_r+0xea>
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	442b      	add	r3, r5
 8003494:	6023      	str	r3, [r4, #0]
 8003496:	f8d8 3000 	ldr.w	r3, [r8]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	bb62      	cbnz	r2, 80034f8 <_malloc_r+0xdc>
 800349e:	f8c8 7000 	str.w	r7, [r8]
 80034a2:	e00f      	b.n	80034c4 <_malloc_r+0xa8>
 80034a4:	6822      	ldr	r2, [r4, #0]
 80034a6:	1b52      	subs	r2, r2, r5
 80034a8:	d420      	bmi.n	80034ec <_malloc_r+0xd0>
 80034aa:	2a0b      	cmp	r2, #11
 80034ac:	d917      	bls.n	80034de <_malloc_r+0xc2>
 80034ae:	1961      	adds	r1, r4, r5
 80034b0:	42a3      	cmp	r3, r4
 80034b2:	6025      	str	r5, [r4, #0]
 80034b4:	bf18      	it	ne
 80034b6:	6059      	strne	r1, [r3, #4]
 80034b8:	6863      	ldr	r3, [r4, #4]
 80034ba:	bf08      	it	eq
 80034bc:	f8c8 1000 	streq.w	r1, [r8]
 80034c0:	5162      	str	r2, [r4, r5]
 80034c2:	604b      	str	r3, [r1, #4]
 80034c4:	4630      	mov	r0, r6
 80034c6:	f000 f82f 	bl	8003528 <__malloc_unlock>
 80034ca:	f104 000b 	add.w	r0, r4, #11
 80034ce:	1d23      	adds	r3, r4, #4
 80034d0:	f020 0007 	bic.w	r0, r0, #7
 80034d4:	1ac2      	subs	r2, r0, r3
 80034d6:	bf1c      	itt	ne
 80034d8:	1a1b      	subne	r3, r3, r0
 80034da:	50a3      	strne	r3, [r4, r2]
 80034dc:	e7af      	b.n	800343e <_malloc_r+0x22>
 80034de:	6862      	ldr	r2, [r4, #4]
 80034e0:	42a3      	cmp	r3, r4
 80034e2:	bf0c      	ite	eq
 80034e4:	f8c8 2000 	streq.w	r2, [r8]
 80034e8:	605a      	strne	r2, [r3, #4]
 80034ea:	e7eb      	b.n	80034c4 <_malloc_r+0xa8>
 80034ec:	4623      	mov	r3, r4
 80034ee:	6864      	ldr	r4, [r4, #4]
 80034f0:	e7ae      	b.n	8003450 <_malloc_r+0x34>
 80034f2:	463c      	mov	r4, r7
 80034f4:	687f      	ldr	r7, [r7, #4]
 80034f6:	e7b6      	b.n	8003466 <_malloc_r+0x4a>
 80034f8:	461a      	mov	r2, r3
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	42a3      	cmp	r3, r4
 80034fe:	d1fb      	bne.n	80034f8 <_malloc_r+0xdc>
 8003500:	2300      	movs	r3, #0
 8003502:	6053      	str	r3, [r2, #4]
 8003504:	e7de      	b.n	80034c4 <_malloc_r+0xa8>
 8003506:	230c      	movs	r3, #12
 8003508:	6033      	str	r3, [r6, #0]
 800350a:	4630      	mov	r0, r6
 800350c:	f000 f80c 	bl	8003528 <__malloc_unlock>
 8003510:	e794      	b.n	800343c <_malloc_r+0x20>
 8003512:	6005      	str	r5, [r0, #0]
 8003514:	e7d6      	b.n	80034c4 <_malloc_r+0xa8>
 8003516:	bf00      	nop
 8003518:	20000314 	.word	0x20000314

0800351c <__malloc_lock>:
 800351c:	4801      	ldr	r0, [pc, #4]	@ (8003524 <__malloc_lock+0x8>)
 800351e:	f7ff bf0e 	b.w	800333e <__retarget_lock_acquire_recursive>
 8003522:	bf00      	nop
 8003524:	2000030c 	.word	0x2000030c

08003528 <__malloc_unlock>:
 8003528:	4801      	ldr	r0, [pc, #4]	@ (8003530 <__malloc_unlock+0x8>)
 800352a:	f7ff bf09 	b.w	8003340 <__retarget_lock_release_recursive>
 800352e:	bf00      	nop
 8003530:	2000030c 	.word	0x2000030c

08003534 <__sflush_r>:
 8003534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800353c:	0716      	lsls	r6, r2, #28
 800353e:	4605      	mov	r5, r0
 8003540:	460c      	mov	r4, r1
 8003542:	d454      	bmi.n	80035ee <__sflush_r+0xba>
 8003544:	684b      	ldr	r3, [r1, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	dc02      	bgt.n	8003550 <__sflush_r+0x1c>
 800354a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	dd48      	ble.n	80035e2 <__sflush_r+0xae>
 8003550:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003552:	2e00      	cmp	r6, #0
 8003554:	d045      	beq.n	80035e2 <__sflush_r+0xae>
 8003556:	2300      	movs	r3, #0
 8003558:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800355c:	682f      	ldr	r7, [r5, #0]
 800355e:	6a21      	ldr	r1, [r4, #32]
 8003560:	602b      	str	r3, [r5, #0]
 8003562:	d030      	beq.n	80035c6 <__sflush_r+0x92>
 8003564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003566:	89a3      	ldrh	r3, [r4, #12]
 8003568:	0759      	lsls	r1, r3, #29
 800356a:	d505      	bpl.n	8003578 <__sflush_r+0x44>
 800356c:	6863      	ldr	r3, [r4, #4]
 800356e:	1ad2      	subs	r2, r2, r3
 8003570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003572:	b10b      	cbz	r3, 8003578 <__sflush_r+0x44>
 8003574:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003576:	1ad2      	subs	r2, r2, r3
 8003578:	2300      	movs	r3, #0
 800357a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800357c:	6a21      	ldr	r1, [r4, #32]
 800357e:	4628      	mov	r0, r5
 8003580:	47b0      	blx	r6
 8003582:	1c43      	adds	r3, r0, #1
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	d106      	bne.n	8003596 <__sflush_r+0x62>
 8003588:	6829      	ldr	r1, [r5, #0]
 800358a:	291d      	cmp	r1, #29
 800358c:	d82b      	bhi.n	80035e6 <__sflush_r+0xb2>
 800358e:	4a2a      	ldr	r2, [pc, #168]	@ (8003638 <__sflush_r+0x104>)
 8003590:	410a      	asrs	r2, r1
 8003592:	07d6      	lsls	r6, r2, #31
 8003594:	d427      	bmi.n	80035e6 <__sflush_r+0xb2>
 8003596:	2200      	movs	r2, #0
 8003598:	6062      	str	r2, [r4, #4]
 800359a:	04d9      	lsls	r1, r3, #19
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	6022      	str	r2, [r4, #0]
 80035a0:	d504      	bpl.n	80035ac <__sflush_r+0x78>
 80035a2:	1c42      	adds	r2, r0, #1
 80035a4:	d101      	bne.n	80035aa <__sflush_r+0x76>
 80035a6:	682b      	ldr	r3, [r5, #0]
 80035a8:	b903      	cbnz	r3, 80035ac <__sflush_r+0x78>
 80035aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80035ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035ae:	602f      	str	r7, [r5, #0]
 80035b0:	b1b9      	cbz	r1, 80035e2 <__sflush_r+0xae>
 80035b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80035b6:	4299      	cmp	r1, r3
 80035b8:	d002      	beq.n	80035c0 <__sflush_r+0x8c>
 80035ba:	4628      	mov	r0, r5
 80035bc:	f7ff fec2 	bl	8003344 <_free_r>
 80035c0:	2300      	movs	r3, #0
 80035c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80035c4:	e00d      	b.n	80035e2 <__sflush_r+0xae>
 80035c6:	2301      	movs	r3, #1
 80035c8:	4628      	mov	r0, r5
 80035ca:	47b0      	blx	r6
 80035cc:	4602      	mov	r2, r0
 80035ce:	1c50      	adds	r0, r2, #1
 80035d0:	d1c9      	bne.n	8003566 <__sflush_r+0x32>
 80035d2:	682b      	ldr	r3, [r5, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0c6      	beq.n	8003566 <__sflush_r+0x32>
 80035d8:	2b1d      	cmp	r3, #29
 80035da:	d001      	beq.n	80035e0 <__sflush_r+0xac>
 80035dc:	2b16      	cmp	r3, #22
 80035de:	d11e      	bne.n	800361e <__sflush_r+0xea>
 80035e0:	602f      	str	r7, [r5, #0]
 80035e2:	2000      	movs	r0, #0
 80035e4:	e022      	b.n	800362c <__sflush_r+0xf8>
 80035e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	e01b      	b.n	8003626 <__sflush_r+0xf2>
 80035ee:	690f      	ldr	r7, [r1, #16]
 80035f0:	2f00      	cmp	r7, #0
 80035f2:	d0f6      	beq.n	80035e2 <__sflush_r+0xae>
 80035f4:	0793      	lsls	r3, r2, #30
 80035f6:	680e      	ldr	r6, [r1, #0]
 80035f8:	bf08      	it	eq
 80035fa:	694b      	ldreq	r3, [r1, #20]
 80035fc:	600f      	str	r7, [r1, #0]
 80035fe:	bf18      	it	ne
 8003600:	2300      	movne	r3, #0
 8003602:	eba6 0807 	sub.w	r8, r6, r7
 8003606:	608b      	str	r3, [r1, #8]
 8003608:	f1b8 0f00 	cmp.w	r8, #0
 800360c:	dde9      	ble.n	80035e2 <__sflush_r+0xae>
 800360e:	6a21      	ldr	r1, [r4, #32]
 8003610:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003612:	4643      	mov	r3, r8
 8003614:	463a      	mov	r2, r7
 8003616:	4628      	mov	r0, r5
 8003618:	47b0      	blx	r6
 800361a:	2800      	cmp	r0, #0
 800361c:	dc08      	bgt.n	8003630 <__sflush_r+0xfc>
 800361e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	f04f 30ff 	mov.w	r0, #4294967295
 800362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003630:	4407      	add	r7, r0
 8003632:	eba8 0800 	sub.w	r8, r8, r0
 8003636:	e7e7      	b.n	8003608 <__sflush_r+0xd4>
 8003638:	dfbffffe 	.word	0xdfbffffe

0800363c <_fflush_r>:
 800363c:	b538      	push	{r3, r4, r5, lr}
 800363e:	690b      	ldr	r3, [r1, #16]
 8003640:	4605      	mov	r5, r0
 8003642:	460c      	mov	r4, r1
 8003644:	b913      	cbnz	r3, 800364c <_fflush_r+0x10>
 8003646:	2500      	movs	r5, #0
 8003648:	4628      	mov	r0, r5
 800364a:	bd38      	pop	{r3, r4, r5, pc}
 800364c:	b118      	cbz	r0, 8003656 <_fflush_r+0x1a>
 800364e:	6a03      	ldr	r3, [r0, #32]
 8003650:	b90b      	cbnz	r3, 8003656 <_fflush_r+0x1a>
 8003652:	f7ff fc8f 	bl	8002f74 <__sinit>
 8003656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f3      	beq.n	8003646 <_fflush_r+0xa>
 800365e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003660:	07d0      	lsls	r0, r2, #31
 8003662:	d404      	bmi.n	800366e <_fflush_r+0x32>
 8003664:	0599      	lsls	r1, r3, #22
 8003666:	d402      	bmi.n	800366e <_fflush_r+0x32>
 8003668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800366a:	f7ff fe68 	bl	800333e <__retarget_lock_acquire_recursive>
 800366e:	4628      	mov	r0, r5
 8003670:	4621      	mov	r1, r4
 8003672:	f7ff ff5f 	bl	8003534 <__sflush_r>
 8003676:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003678:	07da      	lsls	r2, r3, #31
 800367a:	4605      	mov	r5, r0
 800367c:	d4e4      	bmi.n	8003648 <_fflush_r+0xc>
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	059b      	lsls	r3, r3, #22
 8003682:	d4e1      	bmi.n	8003648 <_fflush_r+0xc>
 8003684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003686:	f7ff fe5b 	bl	8003340 <__retarget_lock_release_recursive>
 800368a:	e7dd      	b.n	8003648 <_fflush_r+0xc>

0800368c <__swhatbuf_r>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	460c      	mov	r4, r1
 8003690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003694:	2900      	cmp	r1, #0
 8003696:	b096      	sub	sp, #88	@ 0x58
 8003698:	4615      	mov	r5, r2
 800369a:	461e      	mov	r6, r3
 800369c:	da0d      	bge.n	80036ba <__swhatbuf_r+0x2e>
 800369e:	89a3      	ldrh	r3, [r4, #12]
 80036a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80036a4:	f04f 0100 	mov.w	r1, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2340      	movne	r3, #64	@ 0x40
 80036ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80036b0:	2000      	movs	r0, #0
 80036b2:	6031      	str	r1, [r6, #0]
 80036b4:	602b      	str	r3, [r5, #0]
 80036b6:	b016      	add	sp, #88	@ 0x58
 80036b8:	bd70      	pop	{r4, r5, r6, pc}
 80036ba:	466a      	mov	r2, sp
 80036bc:	f000 f848 	bl	8003750 <_fstat_r>
 80036c0:	2800      	cmp	r0, #0
 80036c2:	dbec      	blt.n	800369e <__swhatbuf_r+0x12>
 80036c4:	9901      	ldr	r1, [sp, #4]
 80036c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80036ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80036ce:	4259      	negs	r1, r3
 80036d0:	4159      	adcs	r1, r3
 80036d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036d6:	e7eb      	b.n	80036b0 <__swhatbuf_r+0x24>

080036d8 <__smakebuf_r>:
 80036d8:	898b      	ldrh	r3, [r1, #12]
 80036da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036dc:	079d      	lsls	r5, r3, #30
 80036de:	4606      	mov	r6, r0
 80036e0:	460c      	mov	r4, r1
 80036e2:	d507      	bpl.n	80036f4 <__smakebuf_r+0x1c>
 80036e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80036e8:	6023      	str	r3, [r4, #0]
 80036ea:	6123      	str	r3, [r4, #16]
 80036ec:	2301      	movs	r3, #1
 80036ee:	6163      	str	r3, [r4, #20]
 80036f0:	b003      	add	sp, #12
 80036f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f4:	ab01      	add	r3, sp, #4
 80036f6:	466a      	mov	r2, sp
 80036f8:	f7ff ffc8 	bl	800368c <__swhatbuf_r>
 80036fc:	9f00      	ldr	r7, [sp, #0]
 80036fe:	4605      	mov	r5, r0
 8003700:	4639      	mov	r1, r7
 8003702:	4630      	mov	r0, r6
 8003704:	f7ff fe8a 	bl	800341c <_malloc_r>
 8003708:	b948      	cbnz	r0, 800371e <__smakebuf_r+0x46>
 800370a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800370e:	059a      	lsls	r2, r3, #22
 8003710:	d4ee      	bmi.n	80036f0 <__smakebuf_r+0x18>
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	f043 0302 	orr.w	r3, r3, #2
 800371a:	81a3      	strh	r3, [r4, #12]
 800371c:	e7e2      	b.n	80036e4 <__smakebuf_r+0xc>
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	6020      	str	r0, [r4, #0]
 8003722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003726:	81a3      	strh	r3, [r4, #12]
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800372e:	b15b      	cbz	r3, 8003748 <__smakebuf_r+0x70>
 8003730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003734:	4630      	mov	r0, r6
 8003736:	f000 f81d 	bl	8003774 <_isatty_r>
 800373a:	b128      	cbz	r0, 8003748 <__smakebuf_r+0x70>
 800373c:	89a3      	ldrh	r3, [r4, #12]
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	81a3      	strh	r3, [r4, #12]
 8003748:	89a3      	ldrh	r3, [r4, #12]
 800374a:	431d      	orrs	r5, r3
 800374c:	81a5      	strh	r5, [r4, #12]
 800374e:	e7cf      	b.n	80036f0 <__smakebuf_r+0x18>

08003750 <_fstat_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4d07      	ldr	r5, [pc, #28]	@ (8003770 <_fstat_r+0x20>)
 8003754:	2300      	movs	r3, #0
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	602b      	str	r3, [r5, #0]
 800375e:	f7fd fb6b 	bl	8000e38 <_fstat>
 8003762:	1c43      	adds	r3, r0, #1
 8003764:	d102      	bne.n	800376c <_fstat_r+0x1c>
 8003766:	682b      	ldr	r3, [r5, #0]
 8003768:	b103      	cbz	r3, 800376c <_fstat_r+0x1c>
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	bd38      	pop	{r3, r4, r5, pc}
 800376e:	bf00      	nop
 8003770:	20000308 	.word	0x20000308

08003774 <_isatty_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4d06      	ldr	r5, [pc, #24]	@ (8003790 <_isatty_r+0x1c>)
 8003778:	2300      	movs	r3, #0
 800377a:	4604      	mov	r4, r0
 800377c:	4608      	mov	r0, r1
 800377e:	602b      	str	r3, [r5, #0]
 8003780:	f7fd fb6a 	bl	8000e58 <_isatty>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d102      	bne.n	800378e <_isatty_r+0x1a>
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	b103      	cbz	r3, 800378e <_isatty_r+0x1a>
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	20000308 	.word	0x20000308

08003794 <_sbrk_r>:
 8003794:	b538      	push	{r3, r4, r5, lr}
 8003796:	4d06      	ldr	r5, [pc, #24]	@ (80037b0 <_sbrk_r+0x1c>)
 8003798:	2300      	movs	r3, #0
 800379a:	4604      	mov	r4, r0
 800379c:	4608      	mov	r0, r1
 800379e:	602b      	str	r3, [r5, #0]
 80037a0:	f7fd fb72 	bl	8000e88 <_sbrk>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	d102      	bne.n	80037ae <_sbrk_r+0x1a>
 80037a8:	682b      	ldr	r3, [r5, #0]
 80037aa:	b103      	cbz	r3, 80037ae <_sbrk_r+0x1a>
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	20000308 	.word	0x20000308

080037b4 <_init>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	bf00      	nop
 80037b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ba:	bc08      	pop	{r3}
 80037bc:	469e      	mov	lr, r3
 80037be:	4770      	bx	lr

080037c0 <_fini>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	bf00      	nop
 80037c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c6:	bc08      	pop	{r3}
 80037c8:	469e      	mov	lr, r3
 80037ca:	4770      	bx	lr
